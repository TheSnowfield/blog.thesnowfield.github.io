{"posts":[{"title":"年輕人的第一台網分","text":"開箱LiteVNA (Vector Network Analyzer) 是一個開源的矢量網路分析儀,可以用來分析天綫性能 / 阻容抗匹配 / 史密斯圖 / 天綫增益 等。因爲最近畫板子需要調試射頻, 所以就趁著價格香就買了。 它長得十分輕便小巧, 顯然沒有那些實驗室内的專業設備強, 但也夠用。 隨包裝附贈了一些配件,有兩根饋綫, 三個測試頭, 一個連接器和一根 TypeC 綫。 不過這個中文説明書對我來説沒什麽用x 反正英文又不是不能看 需要特別説明的是, 中間三個金屬帽一樣的東西是用來校準設備用的,我們下一章節中會講到如何校準設備。 校準設備網分必須校準之後才能開始使用, 所以我們需要三個金屬帽 它們從左到右分別叫短路頭 / 開路頭 / 負載頭。其中負載頭一般為 50Ω。 我們首先進入 CALIBRATE -&gt; CALIBRATE 頁面,能看到有 OPEN / SHORT / LOAD / ISOLN / THRU 這四個選項。 以下列步驟依次進行校準 把開路頭接到 PORT1, 點擊一下 OPEN, 等待校準完畢 把短路頭接到 PORT1, 點擊一下 SHORT, 等待校準完畢 把負載頭接到 PORT1, 點擊一下 LOAD, 等待校準完畢 把負載頭接到 PORT2, 開路頭接到 PORT1, 點擊一下 ISOLN, 等待校準完畢 用饋綫連接 PORT1 和 PORT2, 點擊一下 THRU, 等待校準完畢 當完成以上步驟之後, 別忘了點擊 DONE 保存校準數據。當圖表左邊出現一些小字母的時候, 就説明校準完成了。 不過開始測試天綫之前, 我們需要回到主界面驗證一下。依次接上開路頭, 短路頭, 負載頭, 饋綫, 觀察史密斯圖 就是那個綠色的玩意, 有一個小口訣: 短路在左邊, 負載在中間, 開路在右邊 用它進行對比驗證。 測試天綫和鑒別最後我們來實測一下天綫~ 先測一個 2.4Ghz 小辣椒天綫, 可以看到它的表現力也就凑合。 再來測一根, 經驗可得出它是一個 433Mhz 的天綫。 小插曲最後突然想起我去年打 NOAA 的時候手作的一根天綫。 趕緊拿出來測了一測, 發現 哇什麽玩意, 簡直爛到不行。立刻下樓, 把天綫扔進了垃圾桶。 怪不得總是失敗","link":"/2022/05/29/bonjour-litevna/"},{"title":"CH1115 OLED 熒幕高溫情況","text":"問題最近在倒騰 USBKEY, 但在調試 CH1115 的時候發現, 一旦發送開屏指令,在熒幕 IC 処會出現大約 90 攝氏度左右的發熱點。不是很清楚怎麽回事。 頂著這麽高的溫度竟然還 debug 了好幾個小時, 十分慶幸沒有把我房間燒起來 (不)來看一看熱成像 溫度非常恐怖, 順帶著穩壓也開始微微發燙了。但是看這溫度最少也是有午安大電牛的吧(5A大電流), 但是它只有 132ma 的電流, 有點意外。同時也幾乎可以肯定不是短路造成的問題。 在發現這個問題之前, 我還在疑惑熒幕爲什麽亮了但是沒有完全亮,當時是滿山遍野地在翻閲手冊找「亮度」 和 「對比度」相關的資料, 一心想在睡覺前調好, 完全沒有發覺溫度有異常。 現在一想, 看起來事情確實有點蹊蹺。 原理圖儘管到目前爲止這種情況發生的原因尚不明確, 不過先把原理圖po出來吧。 這是公版的是用内置電荷泵的原理圖 大體上的改動是刪除了沒什麽用的 MOS 管, 考慮到設備采用 USB 供電,只要漏電流不嚴重, 那還是能夠接受的。 其次就是 VBAT_in 処, 由於設備沒有電池, 故將其直接引到 VMCU, 也就是 3.3v。(應該也沒什麽問題吧) 不過我總覺得事情沒這麽簡單。 接錯綫了人剛剛起床。在跟賣家一番激情對綫之後, 才發現原來是綫接錯了。 需要注意的是, 熒幕的 VDD 是邏輯電壓, 一般和晶片電壓一致為 3.3v,但它的 VCC 可不是 3.3v, 而會到是8v左右, 或更高。 因爲根據手冊, 在使用外置電荷泵時, 第 14 脚, 也就是 VCC 需要接入 8v 的電源, 這個脚是通往内部電荷泵輸出的。注意看圖片底部注釋的 VCC_in。 所以想必, 在使用内部電荷泵的時候, 這個脚應該會至少輸出 8v 左右的電壓, 並且要串濾波電容接地。 然而, 我把它… 拉到了 3.3v。 滿身瘡痍, 哭死.wav翻車, 絕對の大翻車。這就折騰修東西去了, 嗚嗚 成功點亮好耶, 修好了。只需要把 VCC 懸空就可以了。亮度問題也順帶解決。 (熒幕上的白點點可以無視掉, 那只是因爲沒有刷屏直接點亮的緣故。","link":"/2022/08/01/ch1115-problem/"},{"title":"如何去控制另一個電路系統中的邏輯電平","text":"最近在忙著做項目, 閑聊時偶然跟朋友討論起來一個問題 如何去控制另一個電路系統中的邏輯電平? 用一個 MOS 管一開始的想法是用一個便宜到不行的 MOS 管(A2SHB)。貼一個 A2SHB 的手冊圖片 我的預期是這樣的 當基極G電荷充滿的時候, D-S導通。 當基極G電荷釋放的時候, D-S處於高阻態。 然而實際遇到了一個奇怪的問題。因爲控制的是 「另外一個電路系統」中的邏輯電平, D-S之間會漏電一樣, 就算G接上了 VCC。 用萬用表測量會發現它會一直響, 並且伴隨著很短的間隔。這個症狀用白話講就是: 當完全通路的時候, 萬用表會發出 “滴——“ 的連續的聲音, 而實際的情況是 “滴-滴-滴-滴-滴-滴-滴-“。 這就很奇怪了。我之前做 PCB 的時候就遇到過這個問題, 結果整板報廢完美翻車。 換個方案一個備用方案就是用光耦。大多數情況下, 光耦就是一個 「LED + 光敏三極管」的那麽一個縫合怪。 在元器件正常工作情況下,LED開啓, 光敏三極管就會打開, 綫路就會導通。反之LED關閉, 綫路就會處於高阻態。 因爲它控制不需要兩邊電路系統有電氣連接, 所以它非常適合用來做電氣隔離。 儅我換上它之後, 發現它能夠完美地實現我的需求。但是它缺點也很多: 除了高頻率(其實它的頻率相對 MOS 管來說實在是太低了)下會發熱很離譜以外, 更大的問題是它的電壓和我所使用MCU的電壓不兼容。 一般光耦器件的工作電壓是 1.6v, 而我所使用的MCU是采用3.3v電壓。直接用 GPIO 驅動勢必會造成燒毀。所以我在 GPIO 前加上了一個降壓電阻, 讓它的電壓降低到1.6v左右讓光耦正常工作。但是這樣電路中的功耗又增加了, 畢竟電阻也會發光發熱。 爲了整個 PCB 至少能用, 我最後不得已采用了光耦的方案。 問題解決話説回來, MOS 管的問題在今天算是有了眉目。我之前電路的接法是這樣的, 它會造成 MOS 管工作不正常。 我堅信這個思路是沒問題的。因爲 MOS 管本來就可以作爲開關使用。 但是我忽略了一個問題, 沒有共地。可以看到, 在圖例中「Circuit System A」的 GND 是沒有接到 MOS 管上的, 這樣電流無法形成回路給基極G充電。所以 MOS 管會工作不正常。果然還是太天真了XD 所以最終將 GND 連接到電路上之後, works well。不過穩定性還需要測試一下才行。 現在, 那個整板報廢的 PCB 應該也能修了。處理辦法也很簡單, 也就是共地。","link":"/2022/05/09/control-a-logical-level/"},{"title":"AXP173 的故障修復","text":"從安利到翻車再到白嫖説到白嫖, 那那那那那那我可就精神了啊 XD。在給 LTC佬 安利了 AXP173 PMIC 的半個月之後, 他在私訊找到我說他板子翻車了。 えええ—– ? 怎麽回事。我都用的好好的東西, 爲什麽到了你的手上就翻?什麽?! 你第一版板子就跑去做 SMT ? 那請務必寄給我一個, 好讓我(白嫖一下)康康怎麽回事 。 經過兩天的焦灼等待, 板子終於到了整體來講, 板子看起來美觀, 還是很不錯的。畢竟我 LTC 佬是什麽人呐, 對不對 XD先給 8 分, 扣 2 分是因爲怕他飄了。開搞開搞! XD 裂開貼好缺少的 AXP173之後, 上電發現 DCDC1 電感的輸出會突然衝到 4v 然後掉電。以一般理性而言, 很明顯 Buck 衝飛了, 目測反饋電路有問題, 就找他要到了原理圖看。 然後人就裂開了 啊…這?雖然不説畫的怎麽樣, 至少我看到的時候是 ? 的。 問題一 反饋電路沒有電氣連接在仔細對照公版原理圖之後, 在47姐的提醒下 (47nb!) 找到了端倪 而在 PCB 上, 絕絕子這麽不仔細, Buck 是肯定要完蛋的, 衝飛了不怕把後端負載炸了嘛。 (高壓の入侵) 飛綫之後, 爲了驗證電路是否還有問題, 於是斷開了後端負載的命脈。這邊還是建議鋪銅走綫, DCDC1 後邊這麽多設備, 然而只拉了這麽一根細綫, 不是很合理。 修復完成, AXP173 空載輸出恢復至 3.6v當然別忘了量完記得把命脈接回去x 問題二 ACIN 和 VBUS 混淆使用對於 AXP173 有三個輸入方式, 分別是 ACIN, VBUS, VBAT.先抛開 VBAT 不談, 先來説一説 ACIN 和 VBUS。 ACIN 指交流電來源, 是從 5v 電源適配器的輸出來的, 一般可以輸出 1A / 2A 或者更多。VBUS 則指 PC 的 USB 總綫電源, 在 USB2.0的標準下, 最大輸出能力只有 500mA, 而 USB3.0 最大 900mA。 雖然對於 AXP173 來説二者都是可以作爲「充電」的電源來源,但一般情況下只考慮充電的話, 還是推薦使用 ACIN, 可以避免許多麻煩。 然而眼前的板子, 它很奇怪。 可以明顯的看到, ACIN 接入了 VBUS。但是 VBUS 接了一個 VBUS2, 這是什麽草玩意? 一番搜尋, 發現這個 VBUS2 除了接了一個 TP5 之後就什麽都沒接, 它是空的 (? 并且因爲他在原理圖上把 N_VBUSEN 拉到了 GND, 導致 AXP173 在使用 ACIN 初始化完畢之後,自動切換到 VBUS, 但這個 VBUS 是假的什麽都沒接… 於是它自鯊了。 解決方法自然也很簡單, 只需要把 ACIN 和 VBUS 短接這樣他們就合體了, 無視 N_VBUSEN。 (這裡用了比較高端的手法, 直接在封裝上短接) 問題三 電容接在了奇怪的地方最後一個問題… 也是找了很久很久才發現。這個就不多説了, 大概就是抄錯了。 解決方法, 把電容和電阻斷開, 並飛綫到 GND。 修到最後至此, AXP173 的電路已經完成修復。板子也成功上電, 好在他的後端電路沒有什麽問題, 不然又是一頓好找了。 連接到電腦, 出現了 RP2040 的 VFS 模擬分區。 由此可見, 白嫖還是需要付出一點代價的 (大霧)","link":"/2022/07/31/fix-axp173/"},{"title":"維修友善之臂 NanoPi R1","text":"今天來幫朋友修一個 友善之臂 NanoPi R1。 最近在忙著做 H3 的核心板, 朋友想幫個忙什麽的就寄過來了一個被他搞寄的 H3 開發板, 好讓我來參考參考。所以我認爲 一個優秀的硬體工程師不僅要懂得怎麽去創造自己的作品, 還要懂得如何去檢測和維修。咳咳.. 扯遠了2333。言歸正傳, 先來看看故障。 經朋友描述, 他把這個板子放進背包挂上充電寶, 然後綫不知道怎麽的被扭了一下, 就寄了。他自己嘗試維修過, 拆了一個 dcdc 降壓晶片, 但是故障依舊。 既然知道了大概原因, 那麽我們就來順著這個方向看看。 對於大短路情況的檢修維修廝常把「燒機」二字挂嘴邊。畢竟這是對於大短路故障的最快定位問題的辦法。那麽我們也可以來。供電接入可調電源, 3V燒機, 限流1A。 焊接兩根燒機綫。 可以看到, 電壓被硬生生拉到了 2.6v, 對地大短路。 從熱成像的圖可以看出, CPU 核心對地大短路。 (這是真寄了)根據 H3 的手冊, 我們可以參考芯片明顯發熱的區域, 對應位置正好是 VCC-3v3-IO 和 VCC-1v2-SYS。所以可以先盲猜炸了兩路供電。 不管怎樣, 先把 CPU 拆下來再説。熱風槍 350 度加熱, 用鑷子掀翻就行。 重新上電燒機, 大短路問題就處理好了, 看起來確實是 CPU 被擊穿導致。那麽接下來就是挨個檢查供電了, 而且著重檢查上邊提到的那兩路供電。 參考著圖紙來維修所幸的是, NanoPi-R1 是開源的, 所以我們能很輕易在網路上找到它的原理圖 上圖分別是 VCC-3v3-IO 和 VCC-1v2-SYS 的電路,可以看到 VCC-3v3-IO 的輸出電感是 L4, VCC-1v2-SYS 的輸出電感是 L3。那麽就去板子上找吧。 看起來被朋友自行維修並拆掉的 dcdc 晶片是它了, 它負責 VCC-3v3-IO 的供電。 上電看看 VCC-1v2-SYS, 輸出 5v! 這是直接把 1v2 擊穿了捅了 5v 到 H3… 不知道怎麽搞的 所以跟我一開始猜測的一致, 就是這兩路供電炸了。那麽問題就都好解決了, 換掉對應的 dcdc 晶片, 問題就修好。 漏網之魚當我滿心歡喜覺得快修好了之後, 重新上電測試發現, 它又恢復大短路狀態了。(草)難道還有第三処炸管的地方? 經過熱成像排查, 忘記拍照了 )這次出問題的地方是另一個 dcdc, 它負責 VCC-1v1-CPUX 的供電。 直接換新的晶片吧。 收尾工作該修的都修的差不多了, 開可調電源打到 5v/2A 欄位, 不出現短路。各路 dcdc 穩壓電路工作正常。那麽就是時候裝新的 H3 上去看看了。 接上串口綫, 打印了一些 kernel 啓動的日志。 發熱均匀, 沒有明顯的熱點, 工作完美 XD。 那麽剩下的事情就是洗洗刷刷乾净, 包好發回去了 順便到付兩塊紅磚。 總結 把電源修好通常能解決大部分故障 對地大短路問題一般是最好修的, 哪裡炸了換哪裡 可以根據 CPU 短路發熱的位置猜測是哪路供電炸了 跟著圖紙來, 善用萬用表 最後, 問題推測。這個板子沒有過壓保護電路的設計, 意味著如果電壓出現毛刺, 超過了 dcdc 的工作電壓就有概率擊穿。所以扭了一下電源線, 還就真的可能炸機 ((( 引用 [1] FriendlyElec NanoPi R1https://www.friendlyelec.com/index.php?route=product/product&product_id=248 [2] NanoPi R1 原理圖參考http://wiki.friendlyelec.com/wiki/images/a/ab/NanoPi_R1_V1.0_1809-Schematic.pdf","link":"/2022/11/20/fix-friendlyelec-nanopi-r1/"},{"title":"又摔壞了一個溫度計","text":"我在發燒的時候往往會顧前不顧後，非常容易摔東西。這應該算是我摔壞的第三個溫度計了。前兩次壞的都是水銀式的，不過沒想到的是，這次把一個電子溫度計給鯊了。 心中大罵f**k，溫度計自從摔地上之後就顯示 L。有可能是Low Battery，也有可能是Low Temperature… 但是量了電池電壓，是 1.5v，那就排除了電池問題。 於是拆開一看，傻眼了() 原來是熱電偶的線給我摔炸了啊xxx那還不修起來，飛線飛線。 此時我還在發高燒 39 度，但爲了能量體溫，那也沒辦法了。 進行飛線修復先把線飛出來，然後用三秒油固化防止短路。 然後焊接到斷掉線的焊盤上，這個步驟比較困難，因爲線很細，而且溫度計的 PCB 也很小。 修好了 繼續躺(又省錢了 (不是其實在意識到溫度計可能壞了之後，馬上就買了新的，但是新的還沒到… 當時氣得想去小料庫找 NTC 用 Arduino 自己先搓一個。 算了，總之繼續躺了。","link":"/2024/06/12/fix-thermometer/"},{"title":"Hello World","text":"前言其實很久以前我也有一個Blog, 但是域名和資料都丟了… 嗚嗚所以很長一段時間(大概有6年) 於是再也沒碰Blog 不過最近看到身邊的朋友都開始玩Blog, 就也開始想重建一下自己的老窩了XD。 所以, 從今天開始, Blog重開啦! ヾ(≧▽≦*)o\\好耶/ \\好耶/ \\好耶/ 主要方向既然要寫Blog, 那麽就要先確定一下自己需要些什麽。目前打算主要方向是 計算機科學 / 程式設計 / 底層開發 / 硬體設計與開發 / 論文閲讀分享, 總結, 交流一些知識經驗和乾貨 (希望不要誤導別人)。 除此之外, 還想寫一些各種踩坑, 無聊時的研究, 碎碎念等。爲了鍛煉自己的造句能力, 有些文章我打算采用全英文書寫。 展望未來希望這個全新的Blog能一直陪伴著我, 不要再因爲諸如停電 斷網 跑路 刪庫 崩潰 之類的破問題纏繞了 嗚嗚嗚… ～( TロT)畢竟重新開Blog也是需要勇氣的呀… 希望自己以後會的東西會越來越多 (最好是能把數學惡補一下)。 一些想學會的東西 編曲 / 電子樂 EDM 繪畫 (現在會一點了XD) 熟練的 EDA 技巧 物理方面 / 光學方向 還有一些其他的 沒想好 結束語歡迎來這裡來做客呀 w\\換友鏈/ 越多越好 再次祈禱不要再爆炸 不要再爆炸 不要再爆炸這次我都換全靜態hexo了 應該不會再炸了吧","link":"/2022/05/05/hello-world/"},{"title":"英集芯 IP5209 的使用","text":"前言需求是「做到邊充邊用」並且體積小電路簡單。 也找過類似於 4056E 這樣的 SOP8 封裝的 Li-ion 充電方案, 但它沒辦法做到上述需求(雖然可以配合一個 MOS 管來檢測5v用來關閉電池供電來實現, 但太麻煩了) 用它只是因爲實在找不到好用的PMIC(Power Management IC)解決方案了。本來是想用 X-Powers 的 AXP 系列, 但是發現體積要麽很大不適合, 要麽就過於Heavy, 要麽就是 NDA 的(簡單來説就是簽保密協議, 要求資質)。 德克薩斯樂器 方案也不錯, 但是價格不菲, 而且傳説假貨橫行, 所以首先不采用。其實能用就行了XD 查閲大量資料之後, 好不容易找到一個非常適合嵌入式項目的 AXP176 超小 BGA 封裝, 但最後發現是一個餅, 連樣品都拿不到。 說在前面, 此文沒有任何業配。 簡單介紹IP5209 是一個高度集成的充放電管理SoC, 特性如下 最大輸出 2.4A 升壓效率高達 96% 壓降效率高達 97% 支援 4.2v / 4.3v / 4.35v 的電池選型 支援外置 NTC 實現的溫度保護 支援短接 / 過充 / 超流 保護 自帶 3 / 4 / 5 LED的電量指示器 自帶 14bit ADC的電量計 待機電流小於 100uA 可編程的充電曲綫 最吸引我的是它的 I2C 功能。透過 I2C 可以上電之後, 輕鬆對它進行編程。可以在運行的時候透過 I2C 很容易地取得電池狀態, 配置充電電流等功能。最重要的一點是它真的很便宜並且很容易買到, 價格在 1CNY 左右。 (但是缺點是需要一個額外的 MCU 去對它通訊(配置), 否則它會直接擺爛) 驚喜之後是一個坑不知道你有沒有發現, 手冊指出它帶一個「LED 電量指示器」。什麽鬼? 爲什麽會有這種奇怪的特性, 莫非… 草。它原來是一個充電寶SoC。恍然大悟。 那照這樣來説, 它的輸出應該是5v。所以如果想要將它用在項目中, 還需要一個LDO去把 5v 轉成3v3。當然如果你所使用的方案本就支援 5v 那就可以直接拿來用了。 突然想起來自己以前用過的一個開源產品 PortaPack H2, 它的按鈕下有4個 LED。 草?!!! 恍然大悟 * 2。 沒錯, 它也是用的「英集芯」電源管理的方案, 它那4個 LED 其實就是充電寳燈…遂拆了一堆 Li-ion 充電器, 發現3個中有2個是「英集芯」的方案, 原來已經這麽普及了嗎… 恍然大悟 * 3。 最小系統電路它的最小應用電路長的還算簡單 把它當作充電寶來看的話(它本來就是)VIN 是 5v 充電輸入, VOUT 是經過 Boost 之後的 5v 輸出。 這裡的 VOUT 就是需要拿去供給負載用的。 草。沒想到這貨竟然還有手電筒功能。挺全的(霧)在第 22 脚的 LIGHT 可以看到, 這個功能應該是透過按下 8 脚的 KEY 來實現的。 值得注意的是, 它有一個 VREG 脚。根據手冊(第11頁), VREG 脚只要不是電池沒電, 它在任何時候都是有 3.1v 的, 並且它的負載能力只有 50mA, 所以它不可以供給大負載使用(這裡的大負載指運行主要業務的電路系統, 不過當然可以把用於啓動時配置 I2C 功能的低功耗 MCU 接到這裡)。 I2C接口的使用根據手冊, 如果想啓用 I2C 功能, 則必須將 L1 / L2 串 2.2K 電阻上拉到 VREG(3.1v), 並且在 L3 為 HIGH 的時候才可以開始讀寫 I2C。如果 L1 / L2 沒有配置上拉電阻, 則會在「休眠狀態轉入工作狀態」的時候進入 LED 電量指示器模式。 需要注意的點是, 不可以使用外部 LDO 供電的 MCU 來配置 I2C,因爲當電池沒有電的時候接入 5v 進入工作狀態的時候, VREG 有電但是沒有 5v 輸出,這樣會導致 I2C 狀態未知, 可能會導致 L1 / L2 無法上拉, 進而導致進入 I2C 模式失敗。 另外需要注意的是, 如果涉及到修改寄存器的值, 則需要先讀出原始值再用位操作修改掉將要修改的值, 最後寫回。不能隨意修改 Reserved 的值, 否則可能會出現無法預料情況。 對了, 它的 I2C 從地址為 0xEA。 文檔和手冊因爲網路上關於它的資料大多都是付費的, 所以這裡放一個很不容易才下載到的 Datasheet。文檔有兩個, SoC 介紹和 I2C 寄存器是分開的。 IP5209-Injoinic.pdfIP5209-IP5109-IP5207-IP5108-I2C-registers.pdf","link":"/2022/05/09/ip5209-usage/"},{"title":"Kintex-7 摸索","text":"因爲資料不太全, 所以先咕著。","link":"/2022/05/05/kintex7-research/"},{"title":"給 kmod 簽名以支援安全啓動","text":"印象中似乎很久沒有寫 blog 了。生活中積累了都是一些比較零碎的東西，沒有什麼特別值得寫的。 半年前買了一台 surface pro 9 之後，直接 ntr 裝了 debian。雖然半年使用體驗下來，個人覺得一致性體驗會比正統 windows 差點，但我仍然通過很多小技巧讓 linux 成爲了我的主力。 我就不買macbook 我就不買 就不買 氣死你們 這篇 blog 大概用作備忘，每次滾內核都要手動簽一下，挺煩的就幾個命令的事情，所以還不想去手動去配 dkms，懶了懶了 關於安全啓動安全啓動固然好，但是有些時候又想偷懶。畢竟我都有 root 了我還有什麼不能幹的x主要問題是，在啓動 kernel 之後，內核似乎會同時啓用 kmod 的簽名檢查，讓一些原本沒有簽名的模塊無法正常加載。比如設備驅動、虛擬機內核模塊 等(真的是很浪費時間耶 至於如何在 surface 啓用安全啓動，這邊就不再贅述了，如果你同樣有 surface 運行 linux 的需求，你可以跟隨 GitHub 上的 linux-surface 項目的 wiki 進行配置。 (大抵還是 mok 那一套 簽名流程因爲我這邊需要簽名的東西是 vmware 的 vmmon 和 vmnet，所以我就以這兩個模塊爲例。你問我都 linux 了爲什麼不用 kvm? 大概還是因爲習慣了 vmware，畢竟還需要管理一些 esxi 實例。二者都可以，只是對我來說 vmware 方便而已了。 簽名流程非常簡單。首先，你需要一個私鑰和一個公鑰。然後，你需要將公鑰加入到你的 MOK 中，這樣你的內核就會信任你的模塊了。那麼上命令吧。 12345$ sudo /usr/src/linux-headers-$(uname -r)/scripts/sign-file \\ sha256 \\ &lt;mok priv&gt; \\ &lt;mok public&gt; \\ $(modinfo -n &lt;mod&gt;) 其中，&lt;mok priv&gt; 是你的私鑰，&lt;mok public&gt; 是你的公鑰，&lt;mod&gt; 是你要簽名的模塊，如果你有正常跟隨 surface-linux 的 wiki 配置安全啓動的話，你應該會有一個密鑰對，直接用它們就行。 這樣，模塊就被簽名好了。直接用 modprobe 或者 insmod 加載上去就行。或者更簡單一些，reboot。 這個方法同樣適用於 virtualbox，簽完加載即可。順便說一句 virtualbox 的3D圖形加速有大約 300MB/s 內存泄漏，開機直接被 oom kill。xs 引用 [1] I can’t execute command modprobe vboxdrvhttps://stackoverflow.com/questions/38437264/i-cant-execute-command-modprobe-vboxdrv [2] linux-surface/wiki/Secure-Boothttps://github.com/linux-surface/linux-surface/wiki/Secure-Boot","link":"/2024/03/21/kmod-signing/"},{"title":"用 OpenOCD 玩樹莓派 Pico","text":"簡單介紹樹莓派 Pico 是樹莓派基金會 (Raspberry-Pi Foundation) 在 2021 年發售的一款嵌入式設備,跟以往的 RPi 1/2/3/4 采用 Linux 系統的開發板來比較而言, 它則是采用了自己研發的 RP2040 嵌入式 MCU。 RP2040 集成了 Dual-Core ARM Cortex-M0+, 默認頻率為 133Mhz。 它特能超頻, 能超到 400Mhz它還具有 264KB 的片上記憶體, 並支援高達 16MB 的片外 Flash。 IC 保密性全給它揚咯 這是 Pico 的 Pinout 對於我這種 ST 我説的不是色圖 重症患者來説, 僅僅需要花上大約 5 CNY 就能買到比 STM32F0C8T6 更强的方案, 這是非常具有誘惑力的。 還沒開始就翻車看到 Pico 屁股上有一個 SWD 接口, 就直接拿 CMSIS-DAP 連上去, 熟練地打開 OpenOCD 123$ openocd -c &quot;adapter speed 100&quot; \\ -f interface/cmsis-dap.cfg \\ -f target/rp2040.cfg 然後原地爆炸 1234567891011121314151617181920Open On-Chip Debugger 0.11.0 (2021-11-18) [https://github.com/sysprogs/openocd]Licensed under GNU GPL v2libusb1 09e75e98b4d9ea7909e8837b7a3f00dda4589dc3For bug reports, read http://openocd.org/doc/doxygen/bugs.htmladapter speed: 100 kHzcortex_m reset_config sysresetreqInfo : Listening on port 6666 for tcl connectionsInfo : Listening on port 4444 for telnet connectionsInfo : CMSIS-DAP: SWD supportedInfo : CMSIS-DAP: JTAG supportedInfo : CMSIS-DAP: Atomic commands supportedInfo : CMSIS-DAP: FW Version = 1.10Info : CMSIS-DAP: Interface Initialised (SWD)Info : SWCLK/TCK = 1 SWDIO/TMS = 1 TDI = 1 TDO = 1 nTRST = 0 nRESET = 1Info : CMSIS-DAP: Interface readyInfo : clock speed 100 kHzError: Error connecting DP: cannot read IDR 怎麽會事呢?在翻閲大量倉庫之後, 發現 OpenOCD 有一個 RP2040 分支。遂去翻找 OpenOCD 的目錄, 發現有一個叫 openocd-rp2040 的可執行檔案。 原來是用錯了啊 換上它, 重新運行一下命令,出現了 USB 斷開連接的提示音, 想必是 Reset 掉了。 但是它仍然不工作 123456789101112Info : clock speed 100 kHzError: CMSIS-DAP command CMD_SWD_Configure failed.Info : SWD DPIDR 0x0bc12477Info : SWD DLPIDR 0x00000001Error: CMSIS-DAP command CMD_SWD_Configure failed.Info : Read incorrect DLIPDR f0000001 (possibly CTRL/STAT value) when selecting coreid 1Info : DAP init failedError: CMSIS-DAP command CMD_SWD_Configure failed.Info : Read incorrect DLIPDR f0000001 (possibly CTRL/STAT value) when selecting coreid 0Error: CMSIS-DAP command CMD_SWD_Configure failed.Info : Read incorrect DLIPDR f0000001 (possibly CTRL/STAT value) when selecting coreid 1 按理説 CMSIS-DAP 作爲 ARM 開發中最推薦使用的編程器,理論上通吃所有 ARM 的設備, 其中自帶的 JTAG 也足以支援絕大多數的處理器, 不應該有問題才是。翻車警告 尋找解決方案其實它的解決方案還挺多的, 其中不乏一些邪術。 I. 使用 Picoprobe使用兩個 Pico, 其中一個 Pico 充當 SWD 調試器, 另一個 Pico 作爲開發設備, 它對應的是 OpenOCD 中的 interface/picoprobe.cfg, 需要事先燒錄固件。 這也是網路中流傳的最多的方法, 它簡單並且對新手友好。但是我覺得很便秘, 我有編程器爲什麽要去做一個新的 II. 使用樹莓派作爲 SWD 調試器這個就更加便秘了, 不再贅述。我相信你也不想用它。 III. 使用 Pico 的 cpu0 去調試 cpu1在上邊的文章中, 我們已經知道 Pico 有兩個核心。這個方法比較少見, 至少我在硬體開發經驗中從來沒見到過這種方法。 不過實際用起來也很方便, 只需要把預先編譯好的固件拷貝到 Pico, 在短暫的下載之後, Pico 會變成一個虛擬的 CMSIS-DAP,然後我們就可以像以前那樣對它進行開發了。 後邊使用 MDK 對 Pico 編程的時候會使用到這個方法。倉庫地址 majbthrd/pico-debug 峰回路轉話説回來, 我在搜尋資料的時候, 偶然發現有人這麽説 Most debugging tools don’t yet support multi-drop (particularly for CMSIS-DAP),including Raspberry’s own OpenOCD fork,it automatically does the SWD multi-drop target selection upon a &gt; CMSIS-DAP DAP_Connect. 看起來由於 RP2040 的特殊架構, 使得一些並不支援 Multi-Drop 功能的調試器無法使用。差不多是這個原因了吧。 那既然 CMSIS-DAP 不能用, 那我首先想到了 JLink。搞事之前首先排除 STLink, 這玩意除了用在 ST 上其他的都是坑。 STlink 有些時候也會坑 ST相比之下在 STLink 遇到的玄學問題, 用 JLink 大概率能解決。 在換上 JLink 之後,意料之中, 使用以下命令果然就能連上了。 1234$ openocd_rp2040 -f interface/jlink.cfg \\ -c &quot;transport select swd; adapter speed 100&quot; \\ -f target/rp2040.cfg \\ -s tcl 它如魅力一般工作, 並且成功檢測到了兩個 Core 1234567891011121314151617181920212223Open On-Chip Debugger 0.10.0 (2021-11-16)Licensed under GNU GPL v2For bug reports, read http://openocd.org/doc/doxygen/bugs.htmladapter speed: 100 kHzInfo : Hardware thread awareness createdInfo : Hardware thread awareness createdInfo : RP2040 Flash Bank CommandInfo : Listening on port 6666 for tcl connectionsInfo : Listening on port 4444 for telnet connectionsInfo : J-Link ARM-OB STM32 compiled Aug 22 2012 19:52:04Info : Hardware version: 7.00Info : VTarget = 3.300 VInfo : clock speed 100 kHzInfo : SWD DPIDR 0x0bc12477Info : SWD DLPIDR 0x00000001Info : SWD DPIDR 0x0bc12477Info : SWD DLPIDR 0x10000001Info : rp2040.core0: hardware has 4 breakpoints, 2 watchpointsInfo : rp2040.core1: hardware has 4 breakpoints, 2 watchpointsInfo : starting gdb server for rp2040.core0 on 3333Info : Listening on port 3333 for gdb connections 之後我們就能對它做一些擦除操作了。 123456789101112# 連接上 OpenOCD 實例$ telnet localhost:4444# 探測 Bank 0&gt; flash probe 0# 整片擦除&gt; halt&gt; flash erase_sector 0 0 last# 檢查是否擦除成功&gt; flash erase_check 0 未完待續","link":"/2022/05/22/play-with-rp2040/"},{"title":"STM32 I2C 不工作的問題","text":"爲了方便調試, 我特意在它啓動的時候打印了一些字符, 在固件載入完畢之後拔掉下載綫, 啓動設備。結果現在的情況是, 這些字符打印了, 但設備的 I2C 不工作。 123456[2022-08-16 12:07:21.006]RX：[2022-08-16 12:07:25.566]RX：[2022-08-16 12:07:29.173]RX：埥窖_K暸乧leared. 量過, 這個時候 I2C 總綫的 SCL 和 SDA 實際上是處於高電平, 也就是空閑狀態。但 SR2-&gt;BUSY 位是 1, 有點靈異。 我也去網上搜羅過很多關於 STM32 I2C 問題的解決方案, 似乎有很多人遇到過。但各種 reset 代碼都加上了, 它們都不太適用我的情況。 事出有因文章寫到這裡, 已經是第二天了。我突然開始好奇, 這個問題竟然會如此穩定的復現, 肯定是有哪寫炸了什麽的。 於是就打開 keil 開始單步代碼, 同時打開邏輯分析儀查看波形。結果真就給我找到了些許端倪 ( 這個地方是我正在用 axp173 給 I2C 縂綫上從設備配電。從設備在上電的時候也會初始化 I2C, 然後把 SCL 綫短暫地拉低了 36us。 再次點擊單步之後我就發現 SR2-&gt;BUSY 就被置了 1, STM32 隨即開始智障,什麽數據都發不出去了, 因爲它覺得自己很忙, 各種返回 HAL_BUSY。 問題也好解決, 只要先給設備上電再初始化 I2C 就行了,或者在初始化之後重載一下 I2C。對於我種比較懶的人, 肯定選是後者了 XD 對症下藥然後就順手給它加上了這一句代碼,本意是清除掉 BUSY 位, 讓它能夠回到正常工作的狀態。 結果重新一跑, 發現這寄存器是 RO (Read Only) 的, 沒辦法手動清掉。(駡駡咧咧不得已, 換個辦法。 我就原地重新初始化一下, 應該沒問題吧不過看起來是修好了 XD","link":"/2022/08/16/problem-about-stm32-i2c/"},{"title":"自動刪除 騰訊QQ 的快取目錄","text":"今天群友一如既往地在群裡抱怨 QQ 的 cache 實在是太多了, 一個賬號下就有上百 GB, 頭大。我也順便去看了一下。還好, 不過大概還是有 30G 的樣子。正當 shift delete 的時候, 突然想到了一個事。 以前的做法是刪掉目錄, 用一個沒有後綴名的檔案去頂替掉目錄, 這樣就會造成打開目錄失敗達到無法寫入的目的。但是 QQ 更新了之後 (想必是有上傳 Log), 這個辦法不管用了。 所以這裡提出一個我的另一個想法。 利用 mklink 將 cache 目錄連接到回收站這聽起來就很草, 來試試。 首先在 Folder Options 文件夾選項 找到並關閉 Hide protected operating system files.然後進入盤符 C, 找到 C:\\$Recycle.Bin\\Recycle Bin, 點擊路徑編輯框, 將路徑記下來。 然後進入 QQ 的 cache 目錄, 敲入以下命令, 將目錄連接到回收站。 123&gt; mklink /J Audio F:\\$RECYCLE.BIN\\S-1-5-21-3915135931-3060788653-94912148-1001&gt; mklink /J Image F:\\$RECYCLE.BIN\\S-1-5-21-3915135931-3060788653-94912148-1001&gt; mklink /J Video F:\\$RECYCLE.BIN\\S-1-5-21-3915135931-3060788653-94912148-1001 實際測試效果不太好, 文件可以寫入到回收站, 但是實際上桌面的回收站圖標進去還是空的,有可能回收站自己也有 cache 一類的東西, 直接以文件系統的方式寫入不是很行。 那麽就連接到 \\\\.\\NUL 吧StackOverflow 搜索了一番, 發現 windows 上有類似 linux 中 /dev/null 的内核對象叫 \\\\.\\NUL。那麽就改掉上邊回收站的路徑, 重新 mklink 試試。 看一看文件夾被連接到哪去了—– 竟然在桌面 在 Windows 中, 你不能以 NUL 為名字創建一個檔案或者目錄, 想必這就是其中的原因。在目錄連接到 NUL 之後, 應該不會再對硬碟有讀寫操作了。","link":"/2022/10/17/remove-qq-caches/"},{"title":"研究一個來歷不明的LCD熒幕","text":"最近發現有一個很便宜的「研究級」LCD有在淘寶售賣, 價格是1CNY。所以一口氣買了50個, 有30個幫朋友買的 人在上海收不到貨。 現在已經被搶空了, 估計是被某個大佬包了XD。 外觀收到包裹, 打開包裝。照例上躰視鏡觀察綫路。 玻璃號為 RFD VA1520821。 晶片表面被用邦定黏在玻璃基板上, 並且有很多類似小氣泡的東西干擾, 看不清内部是什麽。 可以確認的是, 在晶片引出的Pin的左右下角落各有5個Pin組成的「Group」, 較水平方向的Pin更加細長, 並且有一定距離, 特徵比較明顯。 不過仍然沒辦法知道它是什麽型號, 需要一些時間去找手冊比對。 完整綫路圖 初步猜測像是某個公司的定制產品。推測是 ST7565 的兼容IC, 翻閲ST7565的手冊, 發現針脚部分耦合。 與朋友討論交流後得出如下猜測 Pad Def Desc. 11 CS Chip selection 13 RST Reset 14 A0 Cmd / Dat selection 17 WR 8080 Write 18 RD 8080 Read 21 D0 8080 D0 22 D1 8080 D1 23 D2 8080 D2 24 D3 8080 D3 25 D4 8080 D4 26 D5 8080 D5 27 D6 8080 D6 / CLK 28 D7 8080 D7 / MOSI 更進一步又看了看排綫, 猛然發現這綫怎麽這麽亂….拍照, 遂用ps比對著綫路用不同的顔色勾勒出來 然後… 它長這樣我和朋友直接大呼離譜, 從來沒見過種異變 我仍然不甘心, 大力出奇跡掰下背光板(5根綫的那個小排綫連接到的板子)於是一個更迷惑的事情出現了 這是什麽鬼啊!!! (╯°□°）╯︵ ┻━┻ 合著還要輸入 1.8 + 2.8 合成一個 VDD1給IC用? 不對吧…做分壓電阻? 但如果是分壓那怎麽有兩個220Ω的電阻還能分成不同電壓的?這也太離譜了吧 氣到睡覺 =(:3 █████z)- 豪賭一把衆所周知 1.8 + 2.8 合成VDD這種操作太離譜了, 一般腦子沒問題的人都不會這麽設計。這板子都離譜成這樣了 可能他真的有點問題 所以經過一番深思熟慮, 決定賭一把從2.8引脚接入3.3v, 看看會發生什麽。爲了方便飛綫所以改造了一下排綫, 改造之後它就變成了這個樣子XD 於是就更加離譜了 大佬出現氣到睡醒, 發現有大佬在群回復了我。這裡引用一個群大佬的原話 大家想明白为什么这样接没有，VDD1与VSS2 VSS3连通，VDD2用3.6V供电，vdd1分压为1.8V，这样IO电压降为1.8V了。适应1.8V的低功耗单片机驱动。包圆的人不改FPC这屏没法用。 這一想好像也沒毛病的樣子果然就是分壓電阻嘛… 看起來我的判斷沒問題。 朋友那邊也找專業人士確認過, 它應該就是ST7565的定製IC。所以想要點亮它看起來只是時間問題了。 未完待續","link":"/2022/05/06/research-of-a-lcd/"},{"title":"嘗試移植 Micro Python 到 RTL-8710","text":"無聊在自己的藏寶箱 全是廢舊電子開發板 中找到了兩三片已經吃灰數年的 RTL-00 模塊,大概幾年前玩 ESP8266 的時候, 有大佬吹這個模塊有多棒多棒, 然後跟風就買了一些。但是就一直沒用上。 於是乎, 今天意外地把它從塵封的箱子中翻了出來。順便最近一直想玩 Micro Python, 就看看能不能順便玩玩。那就開始吧 XD 魔改 NodeMCU RTL-00 模塊從設計上就和 ESP8266 模塊 P2P (Pin-To-Pin) 兼容,所以可以直接代換, 不會出問題。 那我就直接用 NodeMCU 開刀了。 (以前買了不少這個板子然後只需要按照下表接綫 CMSIS-DAP NodeMCU 3V3 -&gt; 3V GND -&gt; G SWDIO -&gt; D6 SWCLK -&gt; D0 RX -&gt; TX TX -&gt; RX 然後再用 OpenOCD 試著連上板子。如果一切工作, 將會看到 OpenOCD 識別到一個 Cortex-M3 核。 1&gt; openocd -f interface/cmsis-dap.cfg -f target/ameba1-mod.cfg 展開命令行輸出 Open On-Chip Debugger 0.11.0 (2021-11-18) [https://github.com/sysprogs/openocd]Licensed under GNU GPL v2libusb1 09e75e98b4d9ea7909e8837b7a3f00dda4589dc3For bug reports, read http://openocd.org/doc/doxygen/bugs.htmlInfo : auto-selecting first available session transport “swd”. To override use ‘transport select ‘.ameba1_initInfo : Listening on port 6666 for tcl connectionsInfo : Listening on port 4444 for telnet connectionsInfo : CMSIS-DAP: SWD supportedInfo : CMSIS-DAP: JTAG supportedInfo : CMSIS-DAP: Atomic commands supportedInfo : CMSIS-DAP: FW Version = 0254Info : CMSIS-DAP: Serial# = 0700000105deff3834334e4643206540a5a5a5a597969908Info : CMSIS-DAP: Interface Initialised (SWD)Info : SWCLK/TCK = 1 SWDIO/TMS = 1 TDI = 1 TDO = 1 nTRST = 0 nRESET = 1Info : CMSIS-DAP: Interface readyInfo : clock speed 10000 kHzInfo : SWD DPIDR 0x2ba01477Info : rtl8195a.cpu: Cortex-M3 r2p1 processor detectedInfo : rtl8195a.cpu: target has 6 breakpoints, 4 watchpointsInfo : starting gdb server for rtl8195a.cpu on 3333Info : Listening on port 3333 for gdb connections CMSIS-DAP 几乎是基操了。所以如果你常玩 ARM 設備, 我會推薦你買一個 CMSIS-DAP。 附一個我改過的 target 配置。來源 drasko/rtl8710-sdk-3.5a ameba1-mod.cfg 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124# Main file for Ameba1 series Cortex-M3 parts## !!!!!!#set CHIPNAME rtl8195aset CHIPSERIES ameba1# Adapt based on what transport is active.source [find target/swj-dp.tcl]if { [info exists CHIPNAME] } { set _CHIPNAME $CHIPNAME} else { error &quot;CHIPNAME not set. Please do not include ameba1.cfg directly.&quot;}if { [info exists CHIPSERIES] } { # Validate chip series is supported if { $CHIPSERIES != &quot;ameba1&quot; } { error &quot;Unsupported chip series specified.&quot; } set _CHIPSERIES $CHIPSERIES} else { error &quot;CHIPSERIES not set. Please do not include ameba1.cfg directly.&quot;}if { [info exists CPUTAPID] } { # Allow user override set _CPUTAPID $CPUTAPID} else { # Ameba1 use a Cortex M3 core. if { $_CHIPSERIES == &quot;ameba1&quot; } { if { [using_jtag] } { set _CPUTAPID 0x4ba00477 } { set _CPUTAPID 0x2ba01477 } }}swj_newdap $_CHIPNAME cpu -irlen 4 -expected-id $_CPUTAPIDset _TARGETNAME $_CHIPNAME.cpudap create $_CHIPNAME.dap -chain-position $_TARGETNAMEtarget create $_TARGETNAME cortex_m -dap $_CHIPNAME.dap# Run with *real slow* clock by default since the# boot rom could have been playing with the PLL, so# we have no idea what clock the target is running at.adapter speed 10# delays on reset linesadapter srst delay 200if {[using_jtag]} { jtag_ntrst_delay 200}# Ameba1 (Cortex M3 core) support SYSRESETREQif {![using_hla]} { # if srst is not fitted use SYSRESETREQ to # perform a soft reset cortex_m reset_config sysresetreq}$_TARGETNAME configure -event reset-init {ameba1_init}# Ameba1 SDRAM enableproc ameba1_init { } { # init System mww 0x40000014 0x00000021 sleep 10 mww 0x40000304 0x1fc00002 sleep 10 mww 0x40000250 0x00000400 sleep 10 mww 0x40000340 0x00000000 sleep 10 mww 0x40000230 0x0000dcc4 sleep 10 mww 0x40000210 0x00011117 sleep 10 mww 0x40000210 0x00011157 sleep 10 mww 0x400002c0 0x00110011 sleep 10 mww 0x40000320 0xffffffff sleep 10 # init SDRAM mww 0x40000040 0x00fcc702 sleep 10 mdw 0x40000040 mww 0x40005224 0x00000001 sleep 10 mww 0x40005004 0x00000208 sleep 10 mww 0x40005008 0xffffd000 sleep 13 mww 0x40005020 0x00000022 sleep 13 mww 0x40005010 0x09006201 sleep 13 mww 0x40005014 0x00002611 sleep 13 mww 0x40005018 0x00068413 sleep 13 mww 0x4000501c 0x00000042 sleep 13 mww 0x4000500c 0x700 ;# set Idle sleep 20 mww 0x40005000 0x1 ;# start init sleep 100 mdw 0x40005000 mww 0x4000500c 0x600 ;# enter memory mode sleep 30 mww 0x40005008 0x00000000 ;# 0xf00 ;# mww 0x40005008 0x00000f00 sleep 3 mww 0x40000300 0x0006005e ;# 0x5e ;# mww 0x40000300 0x0000005e sleep 3} 隨手寫點固件算了.. 不發了, 這個坑太大了。我是一邊寫 Blog 一邊研究的。文章都寫了一半了, 沒曾想完美翻車。 説起來經歷了不少坎坷。 移植了 Standard SDK 的 HAL 庫, 發現竟然全是從 lib 中 extern 來的符號,而對於寄存器結構是一點説明都沒有, 所以猜測應該是 nda 的。 其次就是因爲沒有 flash 驅動, 要自己從頭寫。所以沒辦法在 OpenOCD 中下載固件,因爲上面 nda 的原因, 自己寫這條路幾乎也是堵死的。不過 GitHub 上倒是有一個參考, 但它不是很合我意。 最後嘗試用 OpenOCD 寫 SRAM 試圖讓固件直接在 RAM 中跑,但不幸的是, 它崩了。 rust 有一個 sdk 庫。結果仔細一看它是 c binding, 實際上還是那個垃圾 Standard SDK。 算了算了, 翻車就翻車吧 最終鑒定: 沒救的電子垃圾。以後有時間了再搞這個, 可以按第 3 步的方法繼續嘗試。 引用 [1] rtl8710 倉庫https://bitbucket.org/rebane/rtl8710 [2] rtl8710-openocd 倉庫https://github.com/sandeepmistry/rtl8710-openocd [3] RTL8710AF Datasheet 技術資料https://datasheetspdf.com/pdf-file/1304447/Realtek/RTL8710AF/1","link":"/2022/10/22/rtl8710-with-mpy/"},{"title":"用 OpenSCAD 繪製一個圓角正方體","text":"前言個人覺得 OpenSCAD 入門還算很快的, 語法非常接近 C 語言。 相比常用的工業建模軟體 SolidWorks 而言,它可以用程式碼去描述工件外觀和大小。具有參數化和可移植性的特點。 非常適合改來改去 話不多説, 立刻開始。 圓角正方體的平面構成我們這裡説的不是通常意義上的 八個邊圓角 的那種, 一個立方體有8個邊嘛而是 四個邊圓角 的類型, 即 與底面垂直的四個邊 是圓角。 而我們在矢量圖形中一般是使用 圓形 和 矩形 取並集去拼合圓角矩形。當然你也可以直接透過繪製四個 1/4 Arc 來達到目的。 那麽在 OpenSCAD 中我們也有差不多的東西,我們可以使用 hull() 來取得對象集合在空間上的極限邊距, 同時抛棄對象集合内部所有的頂點。擺爛了, 隨便把樣子搞出來, 然後丟掉 嘗試畫一個理解這些理論知識之後, 我們可以開始試著畫一個了 123456789101112131415// for high definition curves// so set factor to 0.1$fs = 0.1;translate ([0, 0, 0]) { // get bounding box hull() { // translate object to [0, 0, 0] // draw a cylinder with height 5, radius 0.5 translate([0, 0, 0]) cylinder(5, 0.5, 0.5); translate([5, 0, 0]) cylinder(5, 0.5, 0.5); translate([0, 5, 0]) cylinder(5, 0.5, 0.5); translate([5, 5, 0]) cylinder(5, 0.5, 0.5); }} 然後我們就能得到一個 然後可以包裝一下成爲一個模塊 1234567891011121314module squircle (size = [1, 1, 1], r = 0.5, center = false) { $fs = 0.1; x = size[0] - r * 2; y = size[1] - r * 2; z = size[2]; translate(center ? [-(x / 2), -(y / 2), 0] : [r, r, 0]) hull() { translate([0, 0, 0]) cylinder(z, r = r); translate([x, 0, 0]) cylinder(z, r = r); translate([0, y, 0]) cylinder(z, r = r); translate([x, y, 0]) cylinder(z, r = r); }} 僅僅幾行代碼就能生成一個圓角正方體,以後只需要簡單地修改參數, 我們就能得到不同尺寸的圓角正方體了。這可比 SolidWorks 改草稿的效率要高很多。","link":"/2022/06/02/openscad/draw-squircle-cube/"},{"title":"對於電子音樂作曲的一些思考","text":"算是一個碎碎念吧。 這幾天閑得無事, 瞄了一眼去年就裝電腦上的 FL-Studio。忽然又想起了一些心事。 回想起日常, 雖然自己對絕大多數音樂的類型非常包容, 也會懂得去欣賞,但實際上在 FL 做起來是一點思緒都沒有。 不是卡在旋律, 而是感覺自己沒有勇氣去表達自己的旋律, 雖然這個時候都是自己戴著耳機, 也只有自己一個人有聼。反而我覺得我對旋律比較擅長, 高興的時候時而會哼出來一些調調, 也有過想它們存起來的想法 (這是我想學 EDM 的原因之一) 問題主要出在我現在還完全不熟悉利用各種混音器插件搭配使用去做出來我想要的音色。這對我來説太難了, 看著一整個窗口上密密麻麻的綫和旋鈕… 感覺寸步難行。教程大抵是不管用的, 它只能教會你一些常用手段去做 SFX / 自動化參數控制 / 捏波形 等等,但是對於自己想要的音色, 腦子裡確實能想出來它聽起來是什麽樣子的,但它波形應該是什麽樣子, 怎麽去調出來, 這對我來説比單純的寫代碼, 向 cpu 表達自己想做什麽, 更加抽象。 昨天一口氣下了 100GB 的各種采樣包, 確實也有聽到了自己非常熟悉的 SFX,並且非常希望把它們用在自己的曲子内。 報名學習的群沒了順帶昨天還發生了一些事情。在去年自己有報名一個電子音樂新手班, 在暑假開課。我從中確實也學到很多。 昨天是這個班的最後一堂課, 同時也是宣佈大家畢業。老師讓大家提交自己的作品參加評比, 但我對因爲這方面確實沒什麽經驗所以就沒有提交,然後發現, 大家都沒交。 所以在昨天上課之前, 老師好像生氣了, 只抛下幾句非常涼心的話, 隨即解散了群,大家就這麽不歡而散…當時我看上課時間到了, 就去找群。但是並沒有找到, 直到我去翻了簡訊盒子才知道群被解散了… 我是非常敬仰他的, 作爲我的第一個 EDM 作曲老師, 他無私地向我們傳授作曲思路, 各種 tricks 和合成器的使用,但現在也就只能是深感遺憾, 學生不才, 我沒能達到您的要求。 説到這裡, 心情逐漸變得沉重,眼淚就控制不住地流下來了。 最近的一些打算打算花一些時間來學習 EDM, 雖然變成了完全的自學, 但我相信我自學的能力不差。另外就是朋友那邊的事情, 我決定做完了之後就推掉了。 年底之前, 先去一趟日本。","link":"/2022/08/14/abracadabra/noob-on-making-edm/"},{"title":"STM32 上的任務調度策略 (一)","text":"最近難得有點空閑時間, 就來講講 STM32 上任務調度的策略吧。在我的認知中, 最基本的任務調度無非有兩種方式: 利用 system tick 的中斷計數 保存上下文, 利用中斷進行上下文切換 這麽簡單概括肯定不方便理解, 一次講不完肯定要分兩次 (挖坑)。那這次就先來説説 system tick 的方式吧。 什麽是 system tick這是一個 24 位的系統節拍定時器, 具有自動重載和溢出中斷功能,所有基於 Cortex Profile M 的微控制器都可以由這個定时器獲得一定的時間間隔。 它每隔一段時間會產生一次中斷, 一般使用 1ms 為佳,STM32 的 HAL 庫會使用 HAL_IncTick 來更新系統時間計數, 它就相當於整個單片機系統的心臟。 123456/** * @brief This function handles System tick timer. */void SysTick_Handler(void) { HAL_IncTick();} HAL_Delay 它的内部就使用 system tick 來實現等待,就連 HAL 庫中阻塞調用外設的接口也是使用它來進行超時檢測的。 基於 system tick 任務調度的實現在知道它之後, 我們來開始講怎麽去用它實現任務調度。我們需要擬定一下它整個運作的生命周期: 如上圖所示, 我們需要在中斷中遞增 tick_inc,並在主循環中每次遍歷任務之前保存它並重置計數。 因爲中斷隨時會發生, 所以這一步要越快越好。在遍歷中逐個減少任務的剩餘時間, 當有任務的剩餘時間為 0 或者小於 0 時, 執行該任務並重置它的剩餘時間。 這個模型的好處有 穩定可靠 編寫和使用簡單 平台相關程式碼少, 移植方便快捷 非搶占模型, 不會發生資源衝突 缺點如下 無法保證調度實時性 任務過多容易造成性能瓶頸 基於此模型的異步 Sleep 的實現在理解整個模型如何運作之後, 那麽實現異步等待就非常簡單了。 因爲現在所有的任務都是在 Main Loop 中調度的(參見圖 1.), 所以如果我們在某個任務中使用了 delay (比如 HAL_Delay), 那麽勢必會造成系統假死。 因爲它會阻塞主循環, 導致調度器無法正常調度任務。 爲了解決這個問題, 我們只需要把任務調取權交給需要 delay 的函數, 並同時根據 systick 計算超時。就像這樣。 當然它並沒有考慮到 systick 的溢出情況。 1234567void scheduler_sleep(uint32_t milliseconds) { // loop until time exceeds uint32_t start = tick_get_time(); while(tick_get_time() - start &lt; milliseconds) scheduler_handler();} 需要説明的是, 如果這個 delay 時間太長且超過了任務本身的時間, 則會發生嵌套調用。即: 這個任務因爲剩餘時間小於 0, 在 scheduler_sleep 中被執行, 並再次進入 scheduler_sleep, 最終導致炸棧。這個問題就需要額外處理了, 本文假設不會遇到這種情況。 一些儸嗦關於不能保證任務實時性因爲執行任務的時候必定會消耗一定的時間, 如果此時單片機處理速度較慢且任務間隔時間小,則會造成任務堆積導致卡頓或者響應速度變慢。 所以在使用時應提高間隔時間, 盡可能降低調度壓力。 與 RTOS 的不同實際上它跟 RTOS 的任務調度方式不是一種東西, 它的任務並非「綫程」。因爲不需要進行上下文切換, 且任務之間不是並行的關係, 因此也不存在資源競爭。 C 語言中的實現我已經根據這個思路實現了一個跨平台的任務調度器，支持 async/await，支持 tls存儲。請參考 TheSnowfield/frost。 寫到最後如果有任何意見或者問題或是錯誤或遺漏, 請在下方評論區留言。謝謝 (๑•̀ㅂ•́)و✧ 引用 [1] STM32知识：什么是SYSTICK 作用是什么http://news.eeworld.com.cn/mcu/ic487932.html","link":"/2022/09/21/stm32/stm32-task-schedule-one/"},{"title":"初識泰凌微 TLSR8232 BLE SoC","text":"簡單介紹我第一次認識 TLSR8232 是因爲我一直在尋找一個輕量的 BLE 方案, 偶然間拆解了 小米溫度計 之後看到。然後就被驚艷到了, 它看起來非常適合我的需求。 它不僅封裝小(QFN24), 外圍電路還極端地簡單:只需要 5個電容 和 1個電阻 外加 1個晶振 就能開始工作。 而且它竟然支援到 BLE 5.0 (媽耶) 特性這個方案目前分爲兩個型號, 分別是 SoC SRAM Flash Protocol TLSR8232F512ET32 16KB 512KB Bluetooth LE 5.0 (non-Audio) TLSR8232F512ET24 16KB 512KB Bluetooth LE 5.0 (non-Audio) 但我手上的是 TLSR8232F128ET24 是 128KB 的 Flash, 看起來官網還沒有寫。它們除了封裝和 Flash 大小有區別外, 都是使用的同一個 5316 IP核, 所以功能方面是一樣的。 應該連 Bug 都一樣 值得注意的是, 它們是用的 RISC-V 指令集的處理器。 一些小缺點唯一一個較大的遺憾是, 它需要額外的下載器(Telink)對它編程,協議還不是常用的 SWD / JTAG, 而是他們自己搞的 SWS / SWM (Single Wire Slave / Master)方案。 不過這裡有一個用串口模擬 SWS / SWM 的方案, 不想買 Telink 的朋友可以試一試。其實我覺得用 FTDI 應該更好pvvx/TlsrComSwireWriterAi-Thinker-Open/TBXX_Flash_Tool 據説開發起來有一些坑, 以後遇到了再補。据某個大佬説, Telink 使用的編譯器還有 Bug (操作的 RAM 地址沒有對齊 2 / 4 字節會寫入出錯) 安裝 Telink IDE裝完打開IDE, 開幕雷擊: 這個 智障一樣的 魔改 Eclipse 竟然只會固定尋找 C 盤下的 JVM, 而不是從安裝目錄。所以强制安裝 C 盤從來都是壞文明, 我是非常反感强制安裝 C 盤的做法。 (我就不裝 C 盤你來打我啊) 所以這裡就要用到一個小 Trick 來橄欖它 (記得使用UAC) 12345# 轉到 C 盤根目錄&gt; C: &amp;&amp; cd /# 將 C:\\TelinkSDK 連接到 D:\\TelinkSDK&gt; mklink /J TelinkSDK D:\\TelinkSDK 這裡是大佬給的另外一種解決方法。 打開 D:\\TelinkSDK\\eclipse.ini修改掉 jvm.dll 的路徑 然後它就調教好了? 才怪。 只能搖頭感嘆都 2202 年了爲什麽還有人在用這個垃圾玩意。 快從我電腦滾出去! (震聲)這個爛泥扶不上墻的東西, 得想個辦法用 Makefile 直接用 SDK 的 Toolchain 在 Vscode 寫, 不然我會被氣死的。 構建樣例工程先按照官方的步驟, 下載 SDK 這哪是 SDK, 我看就是工程模板 然後彈出導入向導, 跟隨向導提示將 SDK 導入到工作區。接著就能在 vendor 下看到樣例工程了。 選中感興趣的樣例工程, 然後點擊工具欄上的 🔨 測試編譯, 不出意外 一堆 Warning 之後 編譯成功並生成 bin 檔案。 部署到評估板拿出準備好的 Telink, 用測試探針飛到評估板, 像這樣連接就可以了。 打開 BDT 工具, 依次按照以下操作載入固件 晶片型號選擇 8232 點擊 File -&gt; Open 選擇固件檔案 點擊 Reset 重置晶片 點擊 Active 激活晶片 點擊 Download 載入 載入成功。然後就能打開手機, 檢索 BLE 廣播信標訊號了。 一些囉嗦個人感覺 Telink 的 BLE SoC 還算較方便入門了, 相比隔壁 Nordic 的各種爛大街的 NRF51822,它的工程是分兩個層級 Soft Device 和 User App, 需要先編程它的 Soft Device 然後再編程自己的 App。 部署非常麻煩, 而且在編程自己的 App 之後, 還不知道 Soft Device 有沒有正常運行,經常會發生 「調用 Soft Device API 然後就宕機」 的情況。 個人不是很喜歡這種開發結構了。還是做的太爛了除開開發複雜以外, 而且拆機貨和翻新貨特別多。 而 Telink 是國產方案, 供貨充足, 價格也非常低廉。不過這個上海的公司爲什麽用全英文","link":"/2022/05/11/tlsr8232/meet-tlsr8232/"},{"title":"從零購置一台 Voron 打印機 (二) Klipper 主機調試","text":"還記得上次説到 Voron 采購單中的樹莓派嗎, 現在樹莓派這麽貴而且個人感覺用它性能浪費, 還不如找點其他的方案 所以我的目光來到了上次被我拆掉的那個 先機隨身4G上網卡因爲我給它刷了 Debian, 所以可以做大部分普通派能做的事情, 乃至我現在腦洞大開想把它搞成 Voron 的控制端主機 第一個坑 - Type C 不輸出 5V不得不説, 這個地方的問題我排查一個多小時 Monster 8 控制主機板的 Type-C 後邊有一個 USB-PWR 的跳綫 一開始以爲它是會輸出 5V 電的, 因爲我把跳綫撥到 ON 之後確實會輸出 5V 電壓,但是隨便插了一個設備上去之後, 設備完全沒有反應, 像是完全沒上電的樣子然後用萬用表一量, 好家夥插上設備之後只有 1V 了 遂開始找原理圖, 發現這個跳綫前端連著 VBUS, 但是貌似僅用作輸入但是正好旁邊有一個 USB-A 母口, 它也有一個跳綫, 那我就不客氣地把電借過來用了, 一根飛綫! 因爲 USB-PWR 跳綫的左邊空接, 所以正好借過來的電也不會倒灌,而是直接流向 Type-C 輸出 這簡直太合適了 (不 第二個坑 - USB 工作模式這個問題處理起來比較簡單, 因爲直接就有現成的答案因爲 OpenStick 的 Debian 固件默認啓動時會將 USB 配置爲從模式, 所以無法直接和 Monster 8 通訊 所以在參考 切換 USB 工作模式 之後,使用以下指令就可以達到想要的效果了. 1$ echo host &gt; /sys/kernel/debug/usb/ci_hdrc.0/role 可以看到, 出現了一個 STMicroelectronics Virtual COM Port 的設備, 它就是 Voron 控制板啦 φ(゜▽゜*)♪ 因爲 OpenStick 沒有 USB-ID 脚, 只能這樣手動切換 USB 模式來插入外部設備,或者以後可以把這句指令寫入到啓動脚本或者 SystemCtl 服務來實現開機自動切換, 執行完指令之後所有從設備功能將失效 第三個坑 - 安裝 Klipper 需要過多空間這個坑是我沒想到的, 竟然是因爲安裝 Klipper 的時候依賴了整個源代碼編譯環境,不僅有 arm-gcc / python 2 和 3, 甚至還有完全用不到的 avr-gcc. 這可是 STM32 呀.. 整個安裝過程需要至少 3GB 的空間, 當時我就傻眼了, 怎麽會事呢 (?OpenStick 一般是被嚴重閹割過, 只有 4GB 的eNAND. 而且裝完系統之後還會少一些—— 所以不出意外, 全給我吃光了 所以現在如果還想繼續用 OpenStick 做主機, 那幾乎就只有一條路了,考慮換 EMCP 擴容. EMCP 我選擇的比較穩妥且經過測試的 KMK8X000VM-B412, 配置為 16G(eNAND) + 1G(RAM)應該也許可能大概差不多夠用了 XD, 換新的 EMCP 成本為 18 HKD 左右, 還是承受得起的, 別忘了買植球鋼網 話説貌似.. 用網路把分區映射到 NAS 好像也是一個不錯的選擇… 08/25/2022 更新擴容教程已經施工完畢 ╰(*°▽°*)╯如果你想給你自己的 OpenStick 擴容, 可以參考 EMCP 擴容 第四個坑 - 依賴包炸裂因爲 Moonraker 依賴的 libglib2.0-bin 會依賴比較舊的包,而 OpenStick 預裝的比較新, 會引發一些依賴炸裂的問題, 導致裝不上。 千萬不要去嘗試卸載 libglib2.0-0(=2.68.1-2mobian1), 這樣會導致連帶差不多整個系統都給揚了。 所以我們只需要把 libglib2.0-0 降到 (=2.66.8-1)然後等待降級完畢就行。具體可以參考 libglib2.0-0:amd64 install / remove broke whole ubuntu 1$ sudo apt install -f libglib2.0-0=2.66.8-1 第五個坑 - Locale 不對勁因爲 OpenStick 所使用的 debian 可能被精簡過, 在給 Monster 8 編譯固件之前需要 make menuconfig,然後 python 會打印一行錯誤 1warning: setlocale: LC_ALL: cannot change locale (en_US) 所以我們要自己重新配置一下 locale,選擇 en_US.UTF-8, 等待自動安裝完畢即可 12$ sudo apt install locales$ sudo dpkg-reconfigure locales 第六個坑 - USB Modem (CDC ACM) 支援這個坑目前來說可以説是最大的了, 解決這問題需要重新編譯内核。因爲 OpenStick 的内核默認沒有啓用 USB Modem (CDC ACM) 功能, 所以在插入串口設備的時候沒有 /dev/ttyACM0,會導致一系列問題, 比如 kiauh 等脚本無法識別設備進而導致上載固件失敗, klipper 沒辦法與 Monster 8 通訊。等等 編譯和準備工作所以我們需要準備一個 Debian 9 / Debian 10 的系統 (Ubuntu 也行),先把 OpenStick 的内核克隆下來。 12$ git clone https://github.com/OpenStick/linux --depth 1$ cd linux 然後配置内核編譯選項 123456789# 安裝 gcc9$ sudo apt install gcc-9-aarch64-linux-gnu# 使用交叉編譯$ export ARCH=arm64$ export CROSS_COMPILE=aarch64-linux-gnu-# 構建 menuconfig$ make menuconfig 選擇右下角的 Load,輸入 arch/arm64/configs/msm8916_defconfig, 載入預設 Ok 確認。 然後依次選擇 Device Drivers USB support USB Modem (CDC ACM) support 按下 y 啓用功能 (標記變成 &lt;*&gt;), 然後按下若干次 esc 退出并保存到 .config。 最後開始編譯, 應該不會有問題發生。 1$ make -j24 合成 boot.img跳轉到 arch/arm64/boot 下, 確認存在編譯生成後的 Image.gz 檔案。 敲入以下命令, 將設備樹 dtb 檔案附加在内核尾部,這兒我使用我的設備型號 ufi001c 的設備樹, 請根據實際情況自行調整。 1$ cat Image.gz dts/qcom/msm8916-handsome-openstick-ufi001c.dtb &gt; kernel-dtb 解包 OpenStick 官方發行的 debian 的 boot.img 並提取出 initrd.img。我這就偷懶用 ApkDB 工具來解包了, Windows 上比較方便 XD 這個 ramdisk.gz 就是 initrd.img 了 進入到 OpenStick 終端, 使用 lsblk -f 指令找到 rootfs 所在分區的 UUID 並記下。 重命名為 initrd.img 丟到 debian 去, 使用 mkbootimg 合成 boot.img 檔案需要注意的是在以下命令中 –cmdline 參數中的 root=UUID=xxxx, 需要將 xxxx 換成你自己的 rootfs 分區的 UUID。 12345678910$ mkbootimg \\ --base 0x80000000 \\ --kernel_offset 0x00080000 \\ --ramdisk_offset 0x02000000 \\ --tags_offset 0x01e00000 \\ --pagesize 2048 \\ --second_offset 0x00f00000 \\ --ramdisk initrd.img \\ --cmdline &quot;console=ttyMSM0,115200 root=UUID=xxxx rootwait rootfstype=ext4 consoleblank=0 loglevel=1 cgroup_enable=memory swapaccount=1 rw&quot; \\ --kernel kernel-dtb -o boot.img 最後, 就能得到帶有 USB Modem (CDC ACM) 功能的内核了,使用 fastboot flash boot boot.img 刷新分區, 重啓即可。 Klipper 識別到設備, 開始正常工作 未完待續","link":"/2022/08/24/voron/openstick-with-voron/"},{"title":"從零購置一台 Voron 打印機 (一) 采購","text":"最近打算組裝一台可靠的 3D 打印機, 收到朋友安利 Voron, 看了看挺好而且還是開源項目, 所以就沒多想, 跟隨官網向導拉清單開始采購 BOM 生成向導連接在這 -&gt; Voron Design然後點擊首頁左邊的 Configurator 打開生成向導依次選擇 Direct Feed (近程擠出機) New build. Give me the full BOM. (創建新的實例) Blind Joints (框架接頭) IGUS cable chains (使用坦克鏈) 350mm Spec (構建大小, 這個自由發揮, 我選擇 350mm*350mm) 然後就會出來一個材料 BOM 單, 下載表格文件然後我們開始 (｡･∀･)ﾉﾞ 完整清單請按清單(根據上邊的步驟生成好的清單), 依次購買齊所有配件最右側的 CheckBox 可以幫助你記錄已經完成采購的項目 (打算使用 cookie 永久保存你的清單記錄, 不過現在還沒寫) 此清單大部分翻譯及踩坑由 47姐 提供, 感謝! (*≧︶≦)) 型號 數量 備注 檢查 M5x40 SHCS 22 SHCS 圓柱頭内六角螺絲 M5x30 BHCS 22 BHCS 圓頭(蘑菇) 内六角螺絲 M5x16 BHCS 35 M5x10 BHCS 35 M5 Hexnut 16 Hexnut 六角螺母 M5 Post-install T-nut 68 彈性螺母 注意所有此類螺母要歐標 2020 M5 1mm Shim 42 M5 1mm 墊片 M4x6 BHCS 7 M4 Knurled Nut (DIN 466-B) 4 滾花手擰螺母 M3x40 SHCS 30 M3x30 SHCS 25 M3x20 SHCS 22 M3x16 SHCS 20 M3x12 SHCS 41 M3x10 FHCS 4 FHCS 沉頭内六角 M3x6 FHCS 8 M3x8 SHCS 187 M3x6 BHCS 11 M3 Hexnut 6 M3 Post-install T-nut 103 彈性螺母 注意所有此類螺母要歐標 2020 M3 Hammer Head T-nuts 60 T 型螺母 注意所有此類螺母要歐標 2020 M3 Washer 3 墊片(washer 薄的墊片) M3 Threaded Insert (M3x5x4) 110 熱熔螺母 注意尺寸 M2x10 Self-tapping Screw 16 自攻螺絲 GT2 80T Pulley (5mm ID 6mm W) 4 GT2 傳動輪, T 為齒數 GT2 20T Pulley (5mm ID 6mm W) 3 Pulley 傳動輪 GT2 20T Pulley (5mm ID 9mm W) 4 Toothed Idler 惰輪 GT2 16T Pulley (5mm ID 6mm W) 4 ID 通孔孔徑 GT2 20T Toothed Idler (5mm ID 6mm W) 2 W 適配皮帶寬度 GT2 20T Toothed Idler (5mm ID 9mm W) 4 傳動輪有螺絲, 惰輪沒有 注意區分 F695 Bearing 20 軸承 注意嚴格對應名字買 625 Bearing 12 不可以多字母 也不可以少字母 Ø5x60mm Shaft D Cut 4 不鏽鋼光杆 Ø5x35mm Shaft (trim to size) 1 D Cut 是銑對應位置的 D 型槽 但是實測不用也行 GT2 Belt Loop (6mm W) - 188mm 4 GT2 閉口環形皮帶 長度 188mm 寬度6mm GT2 Open Belt LL-2GT-9 (9mm wide) - 1200mm 4 GT2 開口皮帶 寬度 9mm GT2 Open Belt LL-2GT-6 (6mm wide) - 2000mm 2 GT2 開口皮帶 寬度 6mm BMG Extruder Components Kit 1 BMG原版擠出機套件 Linear Rail MGN9H 400mm 6 綫性導軌 Linear Rail MGN12H 400mm 1 Omron D2F-01L Micro Switch 3 歐姆龍微動 Inductive Probe (See sourcing guide) 1 接近開關 Hotend Kit (24V) 1 熱源 40x40x20 Centrifugal Fan (24V) 1 渦輪風扇 40x40x10 Axial Fan (24V) 1 普通風扇 Mini 12864 Display 1 128*64 小熒幕 (可選) TycoElectronics 10EGG1-1 Filtered Power Inlet (NA/UK) 1 帶保險絲的 AC 座子, 可根據自己所在地區選購 120V 或 220V TycoElectronics 10EGG1-2 Filtered Power Inlet (EU) 1 和上面是一樣的, 只需要買一個就行 Medium Blow Fuse 5x20mm 4A (220V mains) 2 4A 保險絲, 如果你所在地區市電是 220V 就選它 Medium Blow Fuse 5x20mm 8A (120v mains) 1 8A 保險絲, 如果你所在地區市電是 120V 就選它 Keystone CAT6 Insert (Optional) 1 網綫口 (可選) 60x60x20 Fan (24V) 3 大號風扇 Controller with 7+ Stepper outputs 1 控制板, 可以用 MKS Monster 8 替代 TMC2209 Stepper Motor Driver 7 TMC 2209 電機驅動器模塊 USB Cable for selected controller 1 USB cable RaspberryPi 3B+ or better 1 這個隨意, 如果自己有派或者電腦 (可選) Mean Well LRS-200-24 PSU 1 200W 電源, 可選輸出12V 或者 24V (注意要跟上邊風扇匹配電壓) Mean Well RS-25-5 PSU 1 給派的 5V 電源 (可選) Omron G3A-210B-DC5 SSR 1 SSR 固態繼電器, C35 扣具兼容並且要大功率 DIN Rail Mount Bracket for G3A SSR 1 固態繼電器 C35 導軌固定件 BAT85 Diode 1 給接近開關用的二極管 (可選) C13 Power Cord 1 AC 電源綫 (可選) Thermal Fuse (125C) 1 RH溫度保險絲 (安全設備, 重要) NEMA17 Motor 17HS19-2004S 6 42 步進電機, 最好選擇扭矩大角度小的 (比如0.9°) NEMA17 Motor 17HS08-1004S 1 超薄 42 步進電機, 厚度必須小於 2mm, 否則裝不上 Rubber Foot (1.5x.75”, 38x19mm) 4 橡膠脚墊, 減震用 OpenBuilds Billet Angle Corner Connector (2020) 4 2020 V型材角碼 Misumi HFSB5-2020-340 1 2020 V 型材 340mm Misumi HFSB5-2020-430 1 2020 V 型材 430mm Misumi HFSB5-2020-450 2 2020 V 型材 450mm Misumi HFSB5-2020-470-TPW 10 2020 V 型材 470mm (兩端 M5 攻絲) Misumi HFSB5-2020-530-LCP-RCP 4 2020 V 型材 530mm (兩端側面開孔) DIN 3 Rails (35mm W) - 465mm 2 C35 導軌 Fume Extractor Carbon Filter Element 1 活性炭過濾棉 4mm Threaded Bowden Coupler 1 4mm 氣動接頭 (遠程基礎機接頭) 3M VHB Tape 5952 1 3M 膠帶 Loctite Blue Threadlocker Stick 1 固體膠棒 Mobil EP1/2 Grease 1 綫性導軌潤滑油 (WD40也行) Single Sided Foam Tape 1mm Thick (5m) 1 海綿膠帶 Single Sided Foam Tape 3mm Thick (5m) 1 海綿膠帶 Ø6x3mm Neodimium Magnet 8 6*3mm 圓柱小磁鐵 PTFE Tube (4mm OD 3mm ID) - 1000mm 1 鐵氟龍管 PTFE Tube (4mm OD 2mm ID) - 300mm 1 OD外徑 ID内徑 Nylon Cable Ties, Small (.07-.10”, 1.8-2.7mm wide) 42 束綫帶 18AWG Wire (10ft/3m total) 1 導綫 18AWG 20AWG High-flex Wire (10ft/3m total) 1 導綫 20AWG 22-24AWG High-flex Wire (min 19 strand)(250ft/76m total) 1 導綫 22-24AWG Female Spade Crimp Terminal (18-22AWG, .250”, 6.35mm) 7 各種杜邦綫座子之類 (可選) Fork Spade Crimp Terminal (18-22AWG, #10) 5 各種杜邦綫座子之類 (可選) Ring Crimp Terminal (16-22AWG, #6) 1 各種杜邦綫座子之類 (可選) JST XH Connector, 3 Position Male/Female Pair plus Pins 1 各種杜邦綫座子之類 (可選) Connector kit matching your controller choice (usually JST-XH) 1 各種杜邦綫座子之類 (可選) Crimp Ferrule Kit (covering sizes 24AWG to 18AWG) 1 各種杜邦綫座子之類 (可選) MicroFit3 Connector Plug 4 Position 4 各種杜邦綫座子之類 (可選) MicroFit3 Connector Plug 3 Position 1 各種杜邦綫座子之類 (可選) MicroFit3 Connector Plug 2 Position 2 各種杜邦綫座子之類 (可選) MicroFit3 Connector Receptacle 4 Position 4 各種杜邦綫座子之類 (可選) MicroFit3 Connector Receptacle 3 Position 1 各種杜邦綫座子之類 (可選) MicroFit3 Connector Receptacle 2 Position 2 各種杜邦綫座子之類 (可選) MLX Power Receptacle 3 Position (bed wiring) 1 各種杜邦綫座子之類 (可選) MLX Power Plug 3 Position 1 各種杜邦綫座子之類 (可選) MLX Male Pin 6 各種杜邦綫座子之類 (可選) MLX Female Pin 6 各種杜邦綫座子之類 (可選) MicroFit3 Female Pin 40 各種杜邦綫座子之類 (可選) MicroFit3 Male Pin 40 各種杜邦綫座子之類 (可選) WAGO 221-415 Lever-Nuts 3 各種杜邦綫座子之類 (可選) IGUS E2i-10-10-018-0 Chain (405mm [1.33ft]) 2 坦克鏈 轉向半徑 R18 寬 10 高 10 IGUS E2-100-10-12PZ Chain Ends (set) 2 注意, 一份是一對 買之前注意開孔位置 IGUS E2-15-10-028-0 Chain (545mm [1.79ft]) 1 坦克鏈 轉向半徑 R28 寬 15 高 10 IGUS E2-150-10-12PZ Chain Ends (set) 1 注意, 一份是一對 買之前注意開孔位置 Coroplast Sheet - 469x469x4 mm 2 瓦楞塑料板 Coroplast Sheet - 483x503x4 mm 1 瓦楞塑料板 Acrylic Sheet Clear - 241.5x503x3 mm 2 透明亞克力板 Acrylic Sheet Clear - 483x503x3 mm 2 透明亞克力板 Acrylic Sheet Clear - 483x483x3 mm 1 透明亞克力板 MIC6 5/16” Plate - 14”x14” 1 熱床鋁質平台 Adhesive Magnetic Sheet - 14”x14” 1 磁吸 PEI 熱床平台 Spring Steel Flexible Print Surface - 14”x14” 1 磁吸 PEI 熱床平台 Keenovo Silicone AC Heater w/ thermistor - 300x300mm (650W) 1 硅膠熱床, 使用時注意接地 終於列完了, 太多了…這些東西買完差不多要 2k HKD 左右, 懶得自己配就買成品吧, 不過那就要6k了…","link":"/2022/08/23/voron/voron-2-4-bom/"},{"title":"先機隨身 4G WiFi 上網卡 (一) 拆解","text":"入場恨晚前天在群裡看到大佬們在討論一個 WiFi 上網卡, 據説是采用的高通 Snapdragon 410 的方案,然後價格還特別香只要 19.9。 然後當我看到這則訊息的時候, 已經是一個周之後了, 價格已經被炒到了 38 元左右領券購買也要 32 元(這實在是太虧了)。不過還是抱著試一試的心態, 買了一個。 馬上拆解外觀看起來不錯, 整體構造十分簡潔, 並且還有散熱設計。 拆下 USB 頭部的兩顆螺絲, 然後用指甲劃開卡扣, 就能看到内部構造了。 電源管理方案是高通的 PM8916 處理器型號是 MSM8916, 果然是 410。 旁邊還有一顆 Skhynix 的 H9TP32A4GDBCPA-KGM,是一顆集成了 4GB eNAND 和 4Gbit LPDDR2 的存儲器。 它的整體差不多就是這樣, 配置小總結: CPU Snapdragon 410 RAM LPDDR2 4Gbit (512MB) NAND eNAND 4GB 全網通 (移動 / 聯通 / 電信) 一些疑惑看了看説明書, 這個東西開機竟然有要 30 秒,這麽長的時間, 冥冥之中感覺… 它上邊這是不是跑了一個安卓系統 ( 那麽問題來了, 既然它性能看起來這麽不錯, 能不能拿來跑 bot 玩","link":"/2022/08/02/xianji-portable-wifi/teardown/"},{"title":"先機隨身 4G WiFi 上網卡 (二) EMCP 擴容","text":"前幾天在踩坑怎麽把這玩意配合 Voron 使用,結果發現安裝 Klipper 需要非常多的空間, 已經超過它的存儲大小了, 只有可憐的 4GB。 所以最後考慮給它擴容, 成本也不是很高, 18 HKD 能買到一個已經足夠用的 EMCP。話不多説, 現在開始 ヾ(@^▽^@)ノ EMCP 選型可以參考這個 EMCP 表格我選擇的是 KMK8X000VM-B412 (BGA162 LPDDR2 1G + 16G EMMC) (差不多得了)畢竟已經有人測試過它能用了, 爲了保守起見還是沒必要多踩一個坑。 下單購買, 然後就是等快遞了 XD記得買植球鋼網! 記得買植球鋼網! 記得買植球鋼網! 備份分區表和全盤鏡像這一步我只展示在 Windows 上操作的步驟, 如果你用 Linux / BSD 可能比較麻煩吧… OpenStick WiKi 的第一步pip3 安裝 edl有錯誤, 實際 pip 安裝上去的並不是我們刷機要用到的那個 edl 工具 (而是它),錯誤示範我就不貼了, 免得引起誤會。在這給出正確的地址 bkerler/edl。 另外在 Windows 上非常不建議跟隨 OpenStick WiKi 的擴容步驟, 教程需要的 edl 工具在 Windows 環境難以安裝(雖然它是 python),但所依賴的庫在 Windows 下運行會抛出諸如 “Unsupported operation or platform” 此類的錯誤。 總之, 我們只需要使用 miko 就行了。 備份分區表9008 老操作, 不用我多説了吧 XD。(怎麽還要讓我教, 按住 RESET 按鈕, 插上 USB) 打開 miko, 選擇 Read -&gt; Backup Xml Firmware點擊左下角 Load Partition Structure 讀取分區表。 等待右側出現 Reading GPT partition table ..... Done之後,點擊 Save path, 選擇保存到的目錄。最後點擊 Read Full Firmware就行了。稍候片刻, 會 dump 出來很多文件。請注意確認備份目錄是否存在 rawprogram0.xml 文件, 它非常重要 備份全盤鏡像然後切換到右側 Partition Backup / Erase 選項卡 點擊左下角 Load Partition Structure 讀取分區表,等待分區表出現之後, 點擊右下角的 Read Full Image 製作全盤鏡像, 之後你會得到一個 bin 文件, 請妥善保存。 備份完成, 接下來就可以開始更換晶片了 o(*≧▽≦)ツ 更換新的晶片首先把板子搬上手術桌 不用取掉屏蔽罩, 直接用熱風槍 320 攝氏度加熱,半分鐘之後輕鬆取下。USB: aahhhhhrua我死了 (倒下) 那個 USB 遇到高溫擺爛了 233, 我們先不要理它,用吸錫帶清理乾净焊盤, 用洗板水洗乾净並保持整潔, 方便接下來焊接。 最後, 放上新買的晶片, 用熱風槍 350 攝氏度加熱, 可以多放一些焊油。直到它浮起來, 輕輕推動它會被拉回去的狀態。千萬別手殘用鑷子去壓它, 要從側面輕推 (爲了拍照, 放的有點歪)特別注意, 它在加熱之後有几率自己跑掉, 因爲 BGA 球太小還沒化, 焊油受熱流動性強, 拉不住所以建議先預熱板子, 再放入。之後用鑷子輕輕扶著一下 最後記得在焊錫凝固之前, 把之前擺爛的 USB 扶起來。用洗板水洗乾净, 焊接就完成了 ヾ(≧ ▽ ≦)ゝ 恢復之前備份的分區在做這個操作之前, 請確認你是否焊好,如果能進入 9008, 説明應該沒問題, 如果沒有, 可能你換上的是不兼容的或者沒焊接好。 爲了確認晶片是否正常讀寫, 可以打開 miko,選擇 Emmc 選項卡, 點擊 EMMC READ / WRITE TEST 來測試。 刷寫分區依次點擊 Flash -&gt; Xml Flasher,點擊 Raw program, 選擇你備份文件中的 rawprogram0.xml,點擊列表左上角的 CheckBox (複選框) 全選所有分區, 確認中間 Patch 的内容為 patch0.xml, 然後就可以點擊 FLASH! 刷入了。 刷寫鏡像依次點擊 Flash -&gt; emmc block0 flasher,雙擊 Double Click To Open EMMC DATA 編輯框, 選擇你的全盤鏡像備份。刷入即可。 如果沒有什麽問題, 你將會看到板子上熟悉的紅燈開始閃爍,稍等一會兒電腦會識別到新的 USB 設備。 調整分區大小開機之後, 連接上 WiFi 登錄到設備, 1234567891011121314151617181920$ lsblkNAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTmmcblk0 179:0 0 14.6G 0 disk|-mmcblk0p1 179:1 0 2K 0 part|-mmcblk0p2 179:2 0 512K 0 part|-mmcblk0p3 179:3 0 512K 0 part|-mmcblk0p4 179:4 0 1M 0 part|-mmcblk0p5 179:5 0 512K 0 part|-mmcblk0p6 179:6 0 16K 0 part|-mmcblk0p7 179:7 0 2M 0 part|-mmcblk0p8 179:8 0 2M 0 part|-mmcblk0p9 179:9 0 1K 0 part|-mmcblk0p10 179:10 0 2M 0 part|-mmcblk0p11 179:11 0 1M 0 part|-mmcblk0p12 179:12 0 64M 0 part|-mmcblk0p13 179:13 0 1M 0 part`-mmcblk0p14 179:14 0 3.3G 0 part /mmcblk0boot0 179:32 0 4M 1 diskmmcblk0boot1 179:64 0 4M 1 diskzram0 253:0 0 442.2M 0 disk [SWAP] 可以看到, 我們的新 EMCP 已經被識別, 更新到了 16G,但是 mmcblk0p14 分區還是 3.3G, 所以我們接下來需要用到 parted 擴展一下分區。 進入 parted, 提示 GPT 備份表損壞, 敲入 OK。 123(parted) printError: The backup GPT table is corrupt, but the primary appears OK, so that will be used.OK/Cancel? OK 然後它會提示我們的空間沒有完全使用, 可能存在錯誤。敲入 Fix 修復。 123Warning: Not all of the space available to /dev/mmcblk0 appears to be used, you can fix the GPT to use all of the space (anextra 22966272 blocks) or continue with the current setting?Fix/Ignore? Fix 繼續, 敲入 resizepart, 調整分區。選擇需要調整的分區, 選擇 rootfs 所在的分區號 (應該是 mmcblk0p14, 是第 14)然後提示分區正在使用, 確認, 敲入 Yes, 最後敲入 100% 將分區調整至最大。 12345(parted) resizepartPartition number? 14Warning: Partition /dev/mmcblk0p14 is being used. Are you sure you want to continue?Yes/No? YesEnd? [3876MB]? 100% 檢查無問題, 敲入 quit 退出 parted。 12345678910111213141516171819202122(parted) printModel: MMC K8XVMB (sd/mmc)Disk /dev/mmcblk0: 15.6GBSector size (logical/physical): 512B/512BPartition Table: gptDisk Flags:Number Start End Size File system Name Flags 1 67.1MB 67.1MB 2048B cdt 2 134MB 135MB 524kB sbl1 3 135MB 135MB 524kB rpm 4 135MB 136MB 1049kB tz 5 136MB 137MB 524kB hyp 6 137MB 137MB 16.4kB sec 7 137MB 139MB 2097kB modemst1 8 139MB 141MB 2097kB modemst2 9 141MB 141MB 1024B fsc10 201MB 203MB 2097kB fsg11 268MB 269MB 1049kB aboot12 269MB 337MB 67.1MB boot13 337MB 338MB 1049kB devinfo14 338MB 15.6GB 15.3GB ext4 rootfs 最後調整文件分區大小 12345$ sudo resize2fs /dev/mmcblk0p14resize2fs 1.46.2 (28-Feb-2021)Filesystem at /dev/mmcblk0p14 is mounted on /; on-line resizing requiredold_desc_blocks = 1, new_desc_blocks = 2The filesystem on /dev/mmcblk0p14 is now 3734523 (4k) blocks long. 檢查 12345678$ df -hFilesystem Size Used Avail Use% Mounted onudev 423M 0 423M 0% /devtmpfs 89M 1.2M 88M 2% /run/dev/mmcblk0p14 14G 779M 13G 6% /tmpfs 443M 0 443M 0% /dev/shmtmpfs 5.0M 0 5.0M 0% /run/locktmpfs 89M 0 89M 0% /run/user/1001 可以看到, 我們的 RAM 也增加到 1G。 至此, EMCP 擴容成功,非常感謝你能看到這兒, 米娜桑辛苦惹喵 ヾ(*≧∪≦)","link":"/2022/08/25/xianji-portable-wifi/upgrade-emcp/"},{"title":"破解一個 IDE 的授權 (一)","text":"前言 破解僅作爲學習交流使用, 不用作任何商業目的。以下所有描述和截圖均經過脫敏處理。 從朋友那收來了一批好玩的 IC (不方便透露 XD), 但是發現用它需要許可證, 好像還要簽保密協議之類的。因爲自己是散戶人家肯定也不願意跟我簽的x, 所以沒辦法只能另尋他路了。 這個東西還比較小衆, 玩的人不多, 所以幾乎也沒辦法搜到太多資料。於是抱著試一試的心態打開了 IDA, 想看看能不能找出來什麽東西。 大吃一斤什麽? 我這麽菜的也能撿到漏? 不會吧不會吧不會吧? 來看一下它的啓動邏輯 邏輯很簡單。啓動時會檢查一下授權, 如果授權不存在或者失效則彈出錯誤框, 並啓動一個授權配置程式並退出自己。如果授權有效, 則加載主窗口。 不是… 就這?在我對於破解的經驗中, 不應該是會讓我原地放棄的, 鋪天蓋地的混淆亂碼和一堆「Invalid Instructions」嗎?怎麽今天讓我撿到漏了 ( 順水推舟既然它校驗的方法這麽簡單, 那乾脆直接爆破, 改掉 check_license 函數的返回值就可以了,比如在這個函數頂部清棧並 ret 0 就可以實現。 但萬萬沒想到的是, 它竟然在很多地方(指各種負責次要功能的 exe) 都加了這種校驗。那就非常棘手了, 不可能所有文件我都去打補丁嘛, 而且找起來也是非常麻煩。 而且順帶, 我發現它竟在 exe 内嵌入了一個 RSA Public Key。並且驗證邏輯都是依賴於 OpenSSL 去算 RSA 簽名的。那麽, 能不能把他的 Public 換成我們自己生成的呢? (好像是一個更優雅的辦法) 於是, 就手動生成了一個1024 位的 RSA Keypair, 再用 HXD 找到它原來 Public 的位置, 替換掉。最後按照他驗證的方法去逆著生成一個假 License 喂給 IDE。然後它真的能用。 於是乎, 矛頭就指向了無辜的 「OpenSSL」。 (怎麽又是你, 太慘了) 破解思路反匯編上邊那個 load_key 函數, 畢竟破解要盡可能以保證原有功能正常為前提,所以我的目光來到了 BIO_new_mem_buf 這個函數上。 使用它作爲破解點有幾個好處 可以插入判斷 Public 的代碼, 防止破壞了原有的功能 由於是動態庫上的公開 API 函數, 方便快速定位 工作量小, 多個程式都會使用此 API 來加載 Public, 一処破解全部破解 經過簡單修補之後, 換上了我們自己的 Public, 最終它變成了這樣 大概是先判斷一下調用方傳過來的 Public 是不是我們想要的,如果是則直接換成我們自己的, 並調用原來的 BIO_new_mem_buf, 否則不干涉原始執行流程。 典型的 MITM 攻擊 (Man In The Middle)。 試一試換上之前生成好的假 License, 至此, 手動破解結束。","link":"/2022/07/08/crack/crack-an-ide/part-one/"},{"title":"發光應援棒的改造 (前言)","text":"有幸今年去了一趟東京9.3夜場的マジカルミライ, 這次的演唱會真的是太棒了！ 第一次將應援棒緊握在手中的喜悅和激動, 混合著周圍嘈雜的人群；隨著音樂的律動大家整齊地開始揮舞應援棒, 會場内的天花板被晃動著的應援棒星星點點光芒映射出微微綠光；小小的初音未來在透明的全息巨幕上翩翩起舞, 一旁的樂隊奮力演奏著樂器；貝斯手近乎瘋狂的搖晃著腦袋, 會場内回蕩著跳躍的音符將演唱會慢慢推向高潮… 小時候的願望在今年終於實現了！ 就這樣結束了嗎?那當然不是! 我想成爲下次演唱會中最靚的崽崽 (當然不是厄介那種), 所以我想要一個更加炫酷的應援棒!於是就有了這個系列 &lt;-妳好多坑沒填完欸 off topic:而且今年比較忙, 沒怎麽寫文章 )這次來寫個大的 改造的理論驗證我想改造的部分是光源和控制電路部分。將光源換成 WS2812, 在柔光罩的中間塞上兩顆 18650, 也許可以大大提高續航能力。 一些有趣的點子: 可以使用藍牙 BLE, 配對之後在持有多個應援棒的情況下, 可以同步顯示效果, 配合手機實現更多的功能 因爲光源位於柔光罩的中間, 需要靠柄身的 pogopin 來控制, 同時此設計也便於拆卸更換電池 不知道能不能做到配合角速度傳感器來實現揮舞顯示文字的功能 (因爲有柄圖會散光, 可能不好實現)","link":"/2023/10/03/magical-mirai/light-stick/foreword/"},{"title":"發光應援棒的改造 (拆解概覽)","text":"關於應援棒的組成應援棒, 顧名思義呈棒狀。當然也有一些特殊的形狀：比如棒上頂一個球 或者星星 之類,但這種特殊棒不是這次改造的目標。 通常的應援棒大體由兩部分組成, 可以 擰下來的柔光罩 和 柄身。柄身的 LED 發光, 照射在柔光罩上, 柔光罩上的柄圖會將光線散射開來, 形成柔和的光線。 此外柔光罩可以更換柄圖, 可以根據自己的喜好而定,但大部分正常人的 DIY 也就到此爲止了。 至於比較激進的那些厄介大佬, 其性質會嚴重影響 live 觀看體驗, 原則上是不提倡的所以本次改造基於 不影響他人體驗 為基礎 柔光罩結構既然要改造, 那想必要如何去固定内部結構以達到最大的耐久性。 初步觀察, 柔光罩頂部有一個頂蓋, 它有兩個十分堅固的卡扣。它看上去非常合理, 頂蓋卡扣扣死内部的小圓片,裏應外合卡住頂蓋防止脫落。 那麽把它換成pcb, 在達到相同作用的同時, 還能為我們提供一個 pcb 的固定點,以及作爲電池的觸點。不由得感嘆, 真是完美的設計! 頂蓋内側的秘密讓我萬萬沒想到的是, 我嘗試了無數種方法去試圖戳頂蓋卡扣, 它竟紋絲不動。柔光罩長度大約 20cm, 在拆解的時候力臂很短, 使不上勁。外加卡扣的塑料質地意外的硬, 導致很難弄開。 然後我就放棄直接戳卡扣轉而去撬頂蓋, 結果大力出奇跡: 柔光罩蓋子被我幹碎了, 但導致我拆不下來的罪魁禍首也找到了: 原來是有膠。好家夥, 還沒開始就結束了, 直接損 200 mmp) 可能在設計之初就考慮了拆卸, 但是量產之後發現公差太大卡扣不牢固,所以破罐子破摔直接上硬膠粘接, 導致現在拆解困難。 這可怎麽辦…. 要不買一個別的棒子試試 柄身結構柄身由 燈頭, 電路板, 按鈕, 電池倉 組成, 拆解時總體來說比較輕鬆。至少沒有膠只需要拆下燈頭兩側的螺絲, 再把電池倉往内推, 此時燈頭會被推出來。然後用一個東西戳住背後的 hot buton (圓形的那個), 就全部拆出來了。 PCB既然拆出來了那肯定要喵一眼 PCB 啦! 主板鑲嵌在塑料電池倉内, 透過一個摺彎過的的金屬絲與電池負極接觸, 另一邊則是電池的正極。二者的組裝方式都是透過焊接在 PCB 上進行的。 而且你這個回流焊是不是翻車了啊, 繞綫電感怎麽躺著貼上去了? 我要給0分 主板 强迫症受不了了, 把繞綫電感重新給他貼了一遍。 主板上有三個小按鈕, 看著質感非常不錯。是下了足夠的成本的 (欣賞 看看是什麽方案呢… 喔草, 你直接就是不打標是吧 (而且越看越像STC..要不要讓姚老闆來認認貨 XD 。不過這個主控的秘密我們放到之後有時間了再研究 LED 燈珠就這個燈珠而言, 給的還是很良心的。至少這個燈珠除了基本的 RGB 三通道以外, 還增添了兩個額外的通道使其具備色溫調節功能。 這種燈珠一般叫 RGBWY LED, 兼具高亮和大功率以外的彩色 LED 方案。W 嘛.. White, Y 嘛就是 Yellow 了。 另外絲印 KB1_R_LED_V5PD.. 這真的不是 kb 的板子麽?我説的是 King Blade(無業配): 點擊購買! &gt; KING BLADE ONE1 &lt; 無論從外形到設計, 以及按鈕位置和形狀… 都是一模一樣的啊!好啊, 你給我搞 OEM 是吧.wav 確認改造方向首先, 柔光罩的頂蓋確認是拆不下來了, 似乎只能從拆解更方便的柄身入手。其次 PCB 肯定是需要重新設計的, 只不過只改動柄身的情況下似乎並不需要高成本的 pogopin 之類的了。 (似乎也是一個好消息?","link":"/2023/10/05/magical-mirai/light-stick/teardown/"},{"title":"無聊拍點月餅","text":"DSC02742_origin.jpg DSC02735_origin.jpg DSC02738_origin.jpg 拍照無時無刻不提醒著我該攢錢搞個好點的裝備了 (我要長焦 我要長焦 我要長焦 我要長焦 我要長焦","link":"/2023/10/06/photography/mooncake-2023/mooncake-2023/"}],"tags":[{"name":"硬體開發","slug":"硬體開發","link":"/tags/%E7%A1%AC%E9%AB%94%E9%96%8B%E7%99%BC/"},{"name":"無聊研究","slug":"無聊研究","link":"/tags/%E7%84%A1%E8%81%8A%E7%A0%94%E7%A9%B6/"},{"name":"COSMOS USBKEY","slug":"COSMOS-USBKEY","link":"/tags/COSMOS-USBKEY/"},{"name":"CH1115","slug":"CH1115","link":"/tags/CH1115/"},{"name":"正當白嫖行爲","slug":"正當白嫖行爲","link":"/tags/%E6%AD%A3%E7%95%B6%E7%99%BD%E5%AB%96%E8%A1%8C%E7%88%B2/"},{"name":"修修補補的寶貴經驗","slug":"修修補補的寶貴經驗","link":"/tags/%E4%BF%AE%E4%BF%AE%E8%A3%9C%E8%A3%9C%E7%9A%84%E5%AF%B6%E8%B2%B4%E7%B6%93%E9%A9%97/"},{"name":"AXP173","slug":"AXP173","link":"/tags/AXP173/"},{"name":"AllWinner H3","slug":"AllWinner-H3","link":"/tags/AllWinner-H3/"},{"name":"Xilinx","slug":"Xilinx","link":"/tags/Xilinx/"},{"name":"Kintex-7","slug":"Kintex-7","link":"/tags/Kintex-7/"},{"name":"FPGA","slug":"FPGA","link":"/tags/FPGA/"},{"name":"樹莓派","slug":"樹莓派","link":"/tags/%E6%A8%B9%E8%8E%93%E6%B4%BE/"},{"name":"RP2040","slug":"RP2040","link":"/tags/RP2040/"},{"name":"撿垃圾","slug":"撿垃圾","link":"/tags/%E6%92%BF%E5%9E%83%E5%9C%BE/"},{"name":"完美翻車","slug":"完美翻車","link":"/tags/%E5%AE%8C%E7%BE%8E%E7%BF%BB%E8%BB%8A/"},{"name":"碎碎念","slug":"碎碎念","link":"/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"},{"name":"STM32","slug":"STM32","link":"/tags/STM32/"},{"name":"BLE","slug":"BLE","link":"/tags/BLE/"},{"name":"Voron","slug":"Voron","link":"/tags/Voron/"},{"name":"OpenStick","slug":"OpenStick","link":"/tags/OpenStick/"},{"name":"マジカルミライ","slug":"マジカルミライ","link":"/tags/%E3%83%9E%E3%82%B8%E3%82%AB%E3%83%AB%E3%83%9F%E3%83%A9%E3%82%A4/"}],"categories":[{"name":"LiteVNA","slug":"LiteVNA","link":"/categories/LiteVNA/"},{"name":"STM32","slug":"STM32","link":"/categories/STM32/"},{"name":"硬體開發","slug":"硬體開發","link":"/categories/%E7%A1%AC%E9%AB%94%E9%96%8B%E7%99%BC/"},{"name":"修修補補的寶貴經驗","slug":"修修補補的寶貴經驗","link":"/categories/%E4%BF%AE%E4%BF%AE%E8%A3%9C%E8%A3%9C%E7%9A%84%E5%AF%B6%E8%B2%B4%E7%B6%93%E9%A9%97/"},{"name":"PMIC","slug":"PMIC","link":"/categories/PMIC/"},{"name":"Linux","slug":"Linux","link":"/categories/Linux/"},{"name":"RP2040","slug":"RP2040","link":"/categories/RP2040/"},{"name":"無聊研究","slug":"無聊研究","link":"/categories/%E7%84%A1%E8%81%8A%E7%A0%94%E7%A9%B6/"},{"name":"OpenSCAD","slug":"OpenSCAD","link":"/categories/OpenSCAD/"},{"name":"BLE","slug":"BLE","link":"/categories/BLE/"},{"name":"Voron","slug":"Voron","link":"/categories/Voron/"},{"name":"OpenStick","slug":"OpenStick","link":"/categories/OpenStick/"},{"name":"逆向破解","slug":"逆向破解","link":"/categories/%E9%80%86%E5%90%91%E7%A0%B4%E8%A7%A3/"},{"name":"攝影攝像","slug":"攝影攝像","link":"/categories/%E6%94%9D%E5%BD%B1%E6%94%9D%E5%83%8F/"}],"pages":[{"title":"About","text":"普通的畢業大學生 &amp; 自由職業。雖然什麽也不會, 但目前尚無對沒有工作的擔憂。 只想做好自己該做的和自己感興趣的事情。 目前狀況每天窩在自己的工作室研發產品, 還在努力中。雖然每天都很累, 但很充實。 還有一個很愛自己的男票。&gt; ///// &lt; (沒有了 關於部落格雖然是臨時用了 Anatolo 的主題, 但是我并不滿意。以後有時間了就把它改改吧, 這個主題還有很多bug…. 唉 [10/03/2023 更新]現在部落格已更新到 icarus 主題, 施工完畢！魔改加上了 Giscus 評論區支援 (這玩意還不支持的 得手修 [10/04/2023 更新]簡單兼容了一下暗黑模式和明亮模式, 支持瀏覽器媒體查詢 (算是勉强能切換了起床之後寫了一下樣式預加載, 現在切換主題的時候 layout 不會爆了 (? [10/12/2023 更新]熬夜重寫了友鏈列表, 新版本使用 React 在 Server-Side 全靜態生成, 對網頁蜘蛛友好!並且支援現有的 暗黑/明亮 主題切換 φ(゜▽゜*)♪ (還有一些奇怪的特效之類的另外非常感激在 @InkariAimu 的幫助下改進了大量的 CSS 樣式補丁, 辛苦了! 工作桌直播~","link":"/about/index.html"},{"title":"","text":"#git📢 { height: 100%; width: 100%; } #git📢 iframe { width: 100%; height: 1000px; } .post { margin-top: 0px; margin-left: 0px; margin-right: 0px; } .content { margin-top: 46px; } .post-footer { margin-left: 30px; } // check if a mobile simply :) let is_mobile = window.matchMedia(\"only screen and (max-width: 679px)\").matches; if(is_mobile) $('.sidebar-top').remove();","link":"/git/index.html"},{"title":"Links","text":"Blog名字是 Atmosphere如果需要頭像, 請使用這個就可以了。 標注副標題或者「Description」時,請使用 IN PURSUIT OF FREEDOM。 如果你跟我很熟, 寫氷上の湖精或者湖精也沒有問題。(不推薦的選項有: 糊精 虎鯨 水上的湖精/糊精/虎鯨 大佬 HJ。 加友鏈可以給我發送電郵~或者下方留言 φ(゜▽゜*)♪ 如果你的網站有 icon,那我就會不客氣直接加上 盜鏈 了XD 好朋友們友鏈不分先後, 每次發佈靜態頁面時(真)隨機重排序 (o゜▽゜)o鏈接掛掉/網站倒閉/博主跑路 的話，鏈接會被丟到末尾摺叠請問什麼時候回來呢, 我會很想你的","link":"/links/index.html"}]}